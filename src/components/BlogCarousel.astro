---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import SectionTitle from './SectionTitle.astro';
import { calculateReadingTime } from '../utils/reading-time';

export interface Props {
  title: string;
  subtitle?: string;
  maxPosts?: number;
  lang?: 'fr' | 'en';
  category?: string;
  variant?: 'carousel' | 'grid';
  showAll?: boolean;
  showTitle?: boolean;
  showCTA?: boolean;
  columns?: 2 | 3 | 4;
  skipFirst?: number;
}

const {
  title,
  subtitle,
  maxPosts = 4,
  lang = 'fr',
  category,
  variant = 'carousel',
  showAll = false,
  showTitle = true,
  showCTA = true,
  columns = 3,
  skipFirst = 0
} = Astro.props;

const ctaHref = lang === 'fr' ? '/fr/articles' : '/en/articles';
const ctaText = lang === 'fr' ? 'Voir tous les articles' : 'View all articles';

// Récupérer les articles publiés et triés par date
const allPosts = await getCollection('blog', ({ data, slug }) => {
  const isCorrectLang = slug.startsWith(`${lang}/`);
  const isCategoryMatch = category ? data.category === category : true;
  return data.draft !== true && isCorrectLang && isCategoryMatch;
});

const sortedPosts = allPosts
  .sort((a, b) => {
    const dateA = new Date(a.data.modified || a.data.date).getTime();
    const dateB = new Date(b.data.modified || b.data.date).getTime();
    return dateB - dateA;
  });

const displayedPosts = showAll 
  ? sortedPosts.slice(skipFirst) 
  : sortedPosts.slice(skipFirst, skipFirst + maxPosts);

// Fonction pour formater la date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat(lang === 'fr' ? 'fr-FR' : 'en-GB', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

// Fonction pour extraire un extrait du contenu
const getExcerpt = (content: string, maxLength: number = 120) => {
  const plainText = content
    .replace(/^---[\s\S]*?---/m, '')
    .replace(/<[^>]*>/g, '')
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    .replace(/[#*_`~]/g, '')
    .trim();
  return plainText.length > maxLength 
    ? plainText.substring(0, maxLength) + '...' 
    : plainText;
};
---

<section class="blog-section">
  {showTitle && (
    <SectionTitle 
      title={title}
      subtitle={subtitle}
    />
  )}
  
  <div class="container">
    <div class={variant === 'carousel' ? 'carousel' : `grid grid-${columns}`}>
      <div class={variant === 'carousel' ? 'carousel-track' : 'articles'} id="blog-carousel">
        {displayedPosts.map((post) => (
          <article class="article-card">
            {post.data.image && (
              <a href={`/${lang}/articles/${post.slug.replace(`${lang}/`, '')}`} class="image-link">
                <Image 
                  src={post.data.image} 
                  alt={post.data.title}
                  width={320}
                  height={180}
                  loading="lazy"
                  quality="mid"
                  class="article-image"
                />
              </a>
            )}
            
            <div class="article-content">
              <div class="meta">
                <a href={`/${lang}/articles/category/${post.data.category.toLowerCase().replace(/\s+/g, '-')}`} class="category">
                  {post.data.category}
                </a>
                <span class="date">
                  {formatDate(post.data.modified && new Date(post.data.modified) > new Date(post.data.date) 
                    ? new Date(post.data.modified) 
                    : post.data.date)}
                </span>
                <span class="reading-time">
                  {calculateReadingTime(post.body, lang)} min
                </span>
              </div>
              
              <h3>
                <a href={`/${lang}/articles/${post.slug.replace(`${lang}/`, '')}`}>
                  {post.data.title}
                </a>
              </h3>
              
              <p class="excerpt">
                {post.data.description || getExcerpt(post.body)}
              </p>
              
              <a href={`/${lang}/articles/${post.slug.replace(`${lang}/`, '')}`} class="read-more">
                {lang === 'fr' ? 'Lire →' : 'Read →'}
              </a>
            </div>
          </article>
        ))}
      </div>
      
      {variant === 'carousel' && (
        <>
          <button class="nav prev" aria-label="Previous">‹</button>
          <button class="nav next" aria-label="Next">›</button>
        </>
      )}
    </div>
    
    {showCTA && (
      <div class="footer">
        <a href={ctaHref} class="cta">
          {ctaText}
        </a>
      </div>
    )}
  </div>
</section>

<style>
  .blog-section {
    padding: 120px 20px 140px;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Carousel */
  .carousel {
    position: relative;
  }

  .carousel-track {
    display: flex;
    gap: 32px;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-bottom: 4px;
    scroll-behavior: smooth;
  }

  .carousel-track::-webkit-scrollbar {
    display: none;
  }

  /* Grid */
  .grid {
    display: grid;
    gap: 24px;
  }

  .articles {
    display: grid;
    gap: 24px;
  }
  
  .grid-2 > .articles {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .grid-3 > .articles {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .grid-4 > .articles {
    grid-template-columns: repeat(4, 1fr);
  }

  /* Article Card */
  .article-card {
    background: #fafbfc;
    border: 1px solid #e5e7eb;
    border-radius: 2px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: all 0.2s ease;
  }
  
  /* Carousel specific width */
  .carousel-track .article-card {
    flex: 0 0 320px;
  }

  .carousel .article-card {
    min-width: 320px;
  }

  .article-card:hover {
    background: #ffffff;
    border-color: #9ca3af;
    transform: translateY(-2px);
  }

  .image-link {
    display: block;
    height: 120px;
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
    overflow: hidden;
    position: relative;
  }
  
  .image-link::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, transparent 0%, rgba(30, 58, 95, 0.03) 100%);
  }

  .article-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.95;
  }
  
  .article-card:hover .article-image {
    opacity: 1;
  }

  .article-content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 24px;
  }

  /* Meta */
  .meta {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
    font-size: 12px;
    color: #6b7280;
  }

  .category {
    color: #1e3a5f;
    text-decoration: none;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 11px;
  }

  .category:hover {
    color: #374151;
  }

  .date::before {
    content: '—';
    margin-right: 8px;
    color: #d1d5db;
  }

  .reading-time::before {
    content: '—';
    margin-right: 8px;
    color: #d1d5db;
  }

  /* Title */
  h3 {
    font-size: var(--font-h3);
    font-weight: 600;
    margin: 0 0 14px 0;
    line-height: 1.4;
  }

  h3 a {
    color: #1e3a5f;
    text-decoration: none;
    display: block;
  }

  h3 a:hover {
    color: #4b5563;
  }

  /* Excerpt */
  .excerpt {
    font-size: var(--font-body) !important;
    line-height: 1.7;
    color: #525252;
    margin: 0 0 20px 0;
    flex-grow: 1;
  }

  /* Read More */
  .read-more {
    font-size: var(--font-h6);
    font-weight: 600;
    color: #1e3a5f;
    text-decoration: none;
    margin-top: auto;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    transition: gap 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .read-more:hover {
    color: #374151;
    gap: 10px;
  }

  /* Navigation */
  .nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background: #ffffff;
    border: 1px solid #d1d5db;
    border-radius: 2px;
    font-size: var(--font-h4);
    color: #6b7280;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.2s ease;
  }

  .nav:hover {
    background: #f9fafb;
    border-color: #9ca3af;
    color: #374151;
  }

  .nav:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .prev {
    left: -24px;
  }

  .next {
    right: -24px;
  }

  /* Footer */
  .footer {
    text-align: center;
    margin-top: 48px;
  }

  .cta {
    display: inline-block;
    padding: 12px 28px;
    background: transparent;
    color: #1e3a5f;
    border: 2px solid #1e3a5f;
    border-radius: 2px;
    text-decoration: none;
    font-size: var(--font-h5);
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .cta:hover {
    background: #1e3a5f;
    color: #ffffff;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .grid-3 .articles,
    .grid-4 .articles {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .blog-section {
      padding: 80px 20px 100px;
    }

    .carousel-track {
      gap: 20px;
    }

    .article-card {
      flex: 0 0 280px;
      min-width: 280px;
    }

    .grid-2 .articles,
    .grid-3 .articles,
    .grid-4 .articles {
      grid-template-columns: 1fr;
    }

    .nav {
      display: none;
    }

    h3 {
      /* Les variables CSS clamp() gèrent déjà le responsive */
    }
  }

  @media (max-width: 480px) {
    .blog-section {
      padding: 60px 16px 80px;
    }

    .article-card {
      flex: 0 0 280px;
      min-width: 280px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('blog-carousel');
    const prevBtn = document.querySelector('.nav.prev');
    const nextBtn = document.querySelector('.nav.next');
    
    if (!track || !prevBtn || !nextBtn) return;
    
    const cards = track.querySelectorAll('.article-card');
    const cardWidth = cards?.[0]?.offsetWidth + 32 || 400;
    
    prevBtn.addEventListener('click', () => {
      track.scrollBy({ left: -cardWidth, behavior: 'smooth' });
    });
    
    nextBtn.addEventListener('click', () => {
      track.scrollBy({ left: cardWidth, behavior: 'smooth' });
    });
    
    const updateButtons = () => {
      const isAtStart = track.scrollLeft <= 0;
      const isAtEnd = track.scrollLeft >= track.scrollWidth - track.clientWidth - 10;
      prevBtn.disabled = isAtStart;
      nextBtn.disabled = isAtEnd;
    };
    
    track.addEventListener('scroll', updateButtons);
    updateButtons();
  });
</script>