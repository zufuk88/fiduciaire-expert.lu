---
export interface Props {
  title: string;
  category: string;
  lang?: 'fr' | 'en';
  image?: any;
  // Les props suivantes sont passées mais non utilisées actuellement
  // Conservées pour compatibilité avec ArticleLayout
  date?: Date;
  modified?: Date;
  author?: string;
  readingTime?: number;
  imageAlt?: string;
}

const { title, category, lang = 'fr', image } = Astro.props;
---

<!-- Article Header -->
<header class="article-header" style={image ? `--hero-image: url(${typeof image === 'string' ? image : image.src})` : ''} role="banner" itemprop="mainEntityOfPage" itemscope itemtype="https://schema.org/WebPage">
  <!-- Hero image uniquement -->
</header>


<style>

  /* Article Header */
  .article-header { 
    padding: 6rem 0 3rem; 
    position: relative;
    overflow: hidden;
    margin-top: -2px;
    background: linear-gradient(135deg, #94a3b8 0%, #cbd5e1 50%, #e2e8f0 100%);
    min-height: 380px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Image de l'article en arrière-plan */
  .article-header[style*="--hero-image"]::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--hero-image) center/cover no-repeat;
    z-index: 0;
    pointer-events: none;
  }
  
  /* Overlay gradient pour assurer la lisibilité */
  .article-header[style*="--hero-image"]::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      180deg,
      rgba(15, 23, 42, 0.2) 0%,
      rgba(15, 23, 42, 0.4) 50%,
      rgba(15, 23, 42, 0.7) 80%,
      rgba(15, 23, 42, 0.85) 100%
    );
    z-index: 1;
    pointer-events: none;
  }
  
  /* Si pas d'image, utiliser le gradient avec motif de carreaux */
  .article-header:not([style*="--hero-image"])::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.10) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 0.10) 1px, transparent 1px);
    background-size: 100px 100px;
    z-index: 1;
    opacity: 0.6;
    pointer-events: none;
  }


  /* Breadcrumb animation */
  @keyframes breadcrumbFadeIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .breadcrumb-item {
    animation: breadcrumbFadeIn 0.4s ease-out;
    animation-fill-mode: both;
  }

  .breadcrumb-item:nth-child(1) { animation-delay: 0.05s; }
  .breadcrumb-item:nth-child(2) { animation-delay: 0.1s; }
  .breadcrumb-item:nth-child(3) { animation-delay: 0.15s; }
  .breadcrumb-item:nth-child(4) { animation-delay: 0.2s; }

  /* Responsive */
  @media (max-width: 1024px) {
    .sticky-search {
      width: 220px;
    }
  }
  
  @media (max-width: 768px) {
    .sticky-breadcrumbs-wrapper {
      top: 56px; /* Mobile header height */
    }
    
    .sticky-content {
      padding: 0.375rem 1rem;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .breadcrumbs {
      width: 100%;
    }
    
    .sticky-search {
      width: 100%;
    }
    
    .breadcrumb-list {
      font-size: 0.75rem;
      gap: 0;
    }
    
    .breadcrumb-link,
    .breadcrumb-current {
      padding: 0.25rem 0.5rem;
    }

    .breadcrumb-separator {
      margin: 0;
    }

    .breadcrumb-separator svg {
      width: 12px;
      height: 12px;
    }
    
    .article-header {
      padding: 6rem 0 3rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const stickyWrapper = document.querySelector('[data-sticky-breadcrumbs]') as HTMLElement;
    if (!stickyWrapper) return;

    const header = document.querySelector('.site-header') as HTMLElement;
    
    // Adjust position based on header height
    function updatePosition() {
      const headerHeight = header ? header.offsetHeight : 64;
      stickyWrapper.style.top = headerHeight + 'px';
    }
    
    // Initial update
    updatePosition();
    
    // Update on resize
    window.addEventListener('resize', updatePosition);
    
    // Reading Progress Bar
    const progressBar = document.querySelector('[data-reading-progress]') as HTMLElement;
    if (!progressBar) return;
    
    function updateReadingProgress() {
      const article = document.querySelector('.article-content');
      if (!article) return;
      
      const articleTop = article.getBoundingClientRect().top + window.scrollY;
      const articleHeight = article.scrollHeight;
      const viewportHeight = window.innerHeight;
      const scrollPosition = window.scrollY;
      
      // Calculate progress
      const startReading = articleTop - viewportHeight;
      const finishReading = articleTop + articleHeight - viewportHeight;
      const totalReadingDistance = finishReading - startReading;
      const currentReadingPosition = scrollPosition - startReading;
      
      let progress = (currentReadingPosition / totalReadingDistance) * 100;
      progress = Math.max(0, Math.min(100, progress));
      
      // Update progress bar
      progressBar.style.width = `${progress}%`;
    }
    
    // Update on scroll
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        window.requestAnimationFrame(updateReadingProgress);
        ticking = true;
        setTimeout(() => { ticking = false; }, 100);
      }
    }
    
    window.addEventListener('scroll', requestTick);
    updateReadingProgress(); // Initial call
  });
</script>