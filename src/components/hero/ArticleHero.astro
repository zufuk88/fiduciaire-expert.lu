---
export interface Props {
  title: string;
  category: string;
  lang?: 'fr' | 'en';
  image?: any;
  // Les props suivantes sont passées mais non utilisées actuellement
  // Conservées pour compatibilité avec ArticleLayout
  date?: Date;
  modified?: Date;
  author?: string;
  readingTime?: number;
  imageAlt?: string;
}

const { title, category, lang = 'fr', image } = Astro.props;

// Breadcrumb items
const breadcrumbItems = lang === 'fr' 
  ? [
      { label: "Accueil", href: "/fr" },
      { label: "Blog", href: "/fr/articles" },
      { label: category, href: `/fr/articles/category/${category.toLowerCase().replace(/\s+/g, '-')}` },
      { label: title }
    ]
  : [
      { label: "Home", href: "/en" },
      { label: "Blog", href: "/en/articles" },
      { label: category, href: `/en/articles/category/${category.toLowerCase().replace(/\s+/g, '-')}` },
      { label: title }
    ];

// Schema.org pour les breadcrumbs
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbItems.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.label,
    ...(item.href && { "item": new URL(item.href, Astro.site).href })
  }))
};
---

<!-- Sticky Breadcrumbs -->
<div class="sticky-breadcrumbs-wrapper" data-sticky-breadcrumbs>
  <div class="sticky-content">
    <nav class="breadcrumbs" aria-label={lang === 'fr' ? 'Fil d\'Ariane' : 'Breadcrumb'}>
      <ol class="breadcrumb-list" itemscope itemtype="https://schema.org/BreadcrumbList">
        {breadcrumbItems.map((item, index) => (
          <li class="breadcrumb-item" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
            {item.href ? (
              <a href={item.href} itemprop="item" class="breadcrumb-link">
                <span itemprop="name">{item.label}</span>
              </a>
            ) : (
              <span class="breadcrumb-current" itemprop="name">{item.label}</span>
            )}
            <meta itemprop="position" content={(index + 1).toString()} />
            {index < breadcrumbItems.length - 1 && (
              <span class="breadcrumb-separator" aria-hidden="true">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M9 6l6 6-6 6" />
                </svg>
              </span>
            )}
          </li>
        ))}
      </ol>
    </nav>
    
    <!-- Integrated Search Bar -->
    <div class="sticky-search">
      <form class="search-form" action={lang === 'fr' ? '/fr/recherche' : '/en/search'} method="get">
        <div class="search-wrapper">
          <input
            type="search"
            name="q"
            class="search-input"
            placeholder={lang === 'fr' ? 'Rechercher...' : 'Search...'}
            aria-label={lang === 'fr' ? 'Rechercher dans les articles' : 'Search articles'}
          />
          <button type="submit" class="search-button" aria-label={lang === 'fr' ? 'Lancer la recherche' : 'Start search'}>
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </button>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Progress Bar -->
  <div class="reading-progress-bar" aria-hidden="true">
    <div class="reading-progress-fill" data-reading-progress></div>
  </div>
</div>

<!-- Article Header -->
<header class="article-header" style={image ? `--hero-image: url(${typeof image === 'string' ? image : image.src})` : ''} role="banner" itemprop="mainEntityOfPage" itemscope itemtype="https://schema.org/WebPage">
  <!-- Hero image uniquement -->
</header>

<script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} is:inline />

<style>

  /* Sticky Breadcrumbs */
  .sticky-breadcrumbs-wrapper {
    position: fixed;
    top: 64px; /* Header height */
    left: 0;
    right: 0;
    z-index: 100;
    background: rgba(30, 41, 59, 0.95);
    backdrop-filter: blur(12px);
    box-shadow: 0 2px 20px rgba(30, 41, 59, 0.15);
  }

  .sticky-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0.5rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  .breadcrumbs {
    flex: 1;
    min-width: 0;
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
    font-size: 0.875rem;
    gap: 0.25rem;
  }
  
  /* Search Bar */
  .sticky-search {
    flex-shrink: 0;
    width: 280px;
  }
  
  .search-form {
    width: 100%;
  }
  
  .search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .search-input {
    width: 100%;
    padding: 0.5rem 2.5rem 0.5rem 1rem;
    font-size: 0.875rem;
    font-family: inherit;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.08);
    color: #ffffff;
    transition: all 0.2s ease;
    outline: none;
  }
  
  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }
  
  .search-input:focus {
    background-color: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.05);
  }
  
  .search-button {
    position: absolute;
    right: 0.25rem;
    padding: 0.375rem;
    background-color: rgba(255, 255, 255, 0.15);
    color: #ffffff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .search-button:hover {
    background-color: rgba(255, 255, 255, 0.25);
    transform: scale(1.05);
  }
  
  .search-button:active {
    transform: scale(0.95);
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
  }

  .breadcrumb-link {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
    transition: all 0.2s ease;
    padding: 0.375rem 0.75rem;
    border-radius: 4px;
    position: relative;
    font-weight: 450;
    letter-spacing: 0.01em;
  }

  .breadcrumb-link:hover {
    color: #2c4157;
    background-color: rgba(255, 255, 255, 1);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .breadcrumb-current {
    color: rgba(255, 255, 255, 1);
    font-weight: 500;
    padding: 0.375rem 0.75rem;
    position: relative;
  }

  .breadcrumb-current::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0.75rem;
    right: 0.75rem;
    height: 2px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 1px;
  }

  .breadcrumb-separator {
    color: rgba(255, 255, 255, 0.6);
    margin: 0 0.125rem;
    display: flex;
    align-items: center;
  }

  .breadcrumb-separator svg {
    width: 14px;
    height: 14px;
    stroke-width: 1.5;
  }
  
  /* Reading Progress Bar */
  .reading-progress-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: rgba(255, 255, 255, 0.1);
    overflow: hidden;
  }
  
  .reading-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6 0%, #60a5fa 100%);
    width: 0%;
    transition: width 0.1s ease-out;
    transform-origin: left;
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
  }

  /* Article Header */
  .article-header { 
    padding: 6rem 0 3rem; 
    position: relative;
    overflow: hidden;
    margin-top: -2px;
    background: linear-gradient(135deg, #94a3b8 0%, #cbd5e1 50%, #e2e8f0 100%);
    min-height: 380px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Image de l'article en arrière-plan */
  .article-header[style*="--hero-image"]::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--hero-image) center/cover no-repeat;
    z-index: 0;
    pointer-events: none;
  }
  
  /* Overlay gradient pour assurer la lisibilité */
  .article-header[style*="--hero-image"]::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      180deg,
      rgba(15, 23, 42, 0.2) 0%,
      rgba(15, 23, 42, 0.4) 50%,
      rgba(15, 23, 42, 0.7) 80%,
      rgba(15, 23, 42, 0.85) 100%
    );
    z-index: 1;
    pointer-events: none;
  }
  
  /* Si pas d'image, utiliser le gradient avec motif de carreaux */
  .article-header:not([style*="--hero-image"])::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.10) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 0.10) 1px, transparent 1px);
    background-size: 100px 100px;
    z-index: 1;
    opacity: 0.6;
    pointer-events: none;
  }


  /* Breadcrumb animation */
  @keyframes breadcrumbFadeIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .breadcrumb-item {
    animation: breadcrumbFadeIn 0.4s ease-out;
    animation-fill-mode: both;
  }

  .breadcrumb-item:nth-child(1) { animation-delay: 0.05s; }
  .breadcrumb-item:nth-child(2) { animation-delay: 0.1s; }
  .breadcrumb-item:nth-child(3) { animation-delay: 0.15s; }
  .breadcrumb-item:nth-child(4) { animation-delay: 0.2s; }

  /* Responsive */
  @media (max-width: 1024px) {
    .sticky-search {
      width: 220px;
    }
  }
  
  @media (max-width: 768px) {
    .sticky-breadcrumbs-wrapper {
      top: 56px; /* Mobile header height */
    }
    
    .sticky-content {
      padding: 0.375rem 1rem;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .breadcrumbs {
      width: 100%;
    }
    
    .sticky-search {
      width: 100%;
    }
    
    .breadcrumb-list {
      font-size: 0.75rem;
      gap: 0;
    }
    
    .breadcrumb-link,
    .breadcrumb-current {
      padding: 0.25rem 0.5rem;
    }

    .breadcrumb-separator {
      margin: 0;
    }

    .breadcrumb-separator svg {
      width: 12px;
      height: 12px;
    }
    
    .article-header {
      padding: 6rem 0 3rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const stickyWrapper = document.querySelector('[data-sticky-breadcrumbs]') as HTMLElement;
    if (!stickyWrapper) return;

    const header = document.querySelector('.site-header') as HTMLElement;
    
    // Adjust position based on header height
    function updatePosition() {
      const headerHeight = header ? header.offsetHeight : 64;
      stickyWrapper.style.top = headerHeight + 'px';
    }
    
    // Initial update
    updatePosition();
    
    // Update on resize
    window.addEventListener('resize', updatePosition);
    
    // Reading Progress Bar
    const progressBar = document.querySelector('[data-reading-progress]') as HTMLElement;
    if (!progressBar) return;
    
    function updateReadingProgress() {
      const article = document.querySelector('.article-content');
      if (!article) return;
      
      const articleTop = article.getBoundingClientRect().top + window.scrollY;
      const articleHeight = article.scrollHeight;
      const viewportHeight = window.innerHeight;
      const scrollPosition = window.scrollY;
      
      // Calculate progress
      const startReading = articleTop - viewportHeight;
      const finishReading = articleTop + articleHeight - viewportHeight;
      const totalReadingDistance = finishReading - startReading;
      const currentReadingPosition = scrollPosition - startReading;
      
      let progress = (currentReadingPosition / totalReadingDistance) * 100;
      progress = Math.max(0, Math.min(100, progress));
      
      // Update progress bar
      progressBar.style.width = `${progress}%`;
    }
    
    // Update on scroll
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        window.requestAnimationFrame(updateReadingProgress);
        ticking = true;
        setTimeout(() => { ticking = false; }, 100);
      }
    }
    
    window.addEventListener('scroll', requestTick);
    updateReadingProgress(); // Initial call
  });
</script>