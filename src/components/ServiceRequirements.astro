---
export interface RequirementCategory {
  title: string;
  icon?: string;
  items: string[];
}

export interface Props {
  categories: RequirementCategory[];
  note?: string;
}

const { 
  categories,
  note
} = Astro.props;
---

<section class="service-requirements">
  <div class="container">
    <div class="requirements-grid">
      {categories.map((category) => (
        <div class="requirement-category">
          <div class="category-header">
            {category.icon && (
              <i class={`category-icon ${category.icon}`}></i>
            )}
            <h3 class="category-title">{category.title}</h3>
          </div>
          
          <ul class="requirement-list">
            {category.items.map(item => (
              <li class="requirement-item">
                <svg class="item-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
                  <path d="M6 12L10 8L6 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>{item}</span>
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
    
    {note && (
      <div class="requirements-note">
        <svg class="note-icon" width="20" height="20" viewBox="0 0 20 20" fill="none">
          <path d="M10 9V10M10 13H10.01M18 10C18 14.4183 14.4183 18 10 18C5.58172 18 2 14.4183 2 10C2 5.58172 5.58172 2 10 2C14.4183 2 18 5.58172 18 10Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <p>{note}</p>
      </div>
    )}
  </div>
</section>

<style>
  .service-requirements {
    padding: 4rem 0;
    background: #f8fafc;
  }

  .requirements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .requirement-category {
    background: white;
    border-radius: 12px;
    padding: 1.75rem;
    border: 1px solid #e2e8f0;
  }

  .category-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.25rem;
  }

  .category-icon {
    font-size: 24px;
    color: #3b82f6;
  }

  .category-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1e293b;
    margin: 0;
  }

  .requirement-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .requirement-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.5rem 0;
    color: #475569;
  }

  .item-icon {
    flex-shrink: 0;
    margin-top: 0.125rem;
    color: #94a3b8;
  }

  .requirement-item span {
    line-height: 1.5;
    font-size: 0.95rem;
  }

  .requirements-note {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    background: #eff6ff;
    border: 1px solid #dbeafe;
    border-radius: 8px;
    padding: 1.25rem;
    margin-top: 2rem;
  }

  .note-icon {
    flex-shrink: 0;
    color: #3b82f6;
    margin-top: 0.125rem;
  }

  .requirements-note p {
    margin: 0;
    color: #1e40af;
    line-height: 1.6;
    font-size: 0.95rem;
  }

    
    .requirement-category {
      background: #0f172a;
      border-color: #334155;
    }
    
    .category-title {
      color: #f1f5f9;
    }
    
    .requirement-item {
      color: #cbd5e1;
    }
    
    .item-icon {
      color: #64748b;
    }
    
    .requirements-note {
      background: #1e3a5f;
      border-color: #2563eb;
    }
    
    .requirements-note p {
      color: #93bbfc;
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .service-requirements {
      padding: 3rem 0;
    }
    
    .requirements-grid {
      grid-template-columns: 1fr;
    }
    
    .requirement-category {
      padding: 1.5rem;
    }
  }
</style>