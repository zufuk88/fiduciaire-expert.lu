---
import SectionTitle from './SectionTitle.astro';

export interface Props {
  // Header
  sectionBadge?: string;
  title?: string;
  subtitle?: string;
  
  // Display mode
  variant?: 'grid' | 'cards' | 'list' | 'presentation' | 'categories';
  columns?: 2 | 3 | 4;
  
  // Services data - flexible structure
  services?: Array<{
    // Basic info
    title: string;
    description?: string;
    href?: string;
    
    // Extended info for 'cards' variant
    icon?: string;
    features?: string[];
    price?: string;
    ctaText?: string;
    accent?: 'blue' | 'gray' | 'gold';
    
    // Content for 'presentation' variant
    content?: string | string[];
    bulletStyle?: 'disc' | 'check' | 'arrow' | 'none';
  }>;
  
  // Sections for 'list' variant
  sections?: Array<{
    title: string;
    content?: string;
    items?: Array<{ label: string; value?: string }>;
    footer?: string;
  }>;
  
  // Categories for 'categories' variant
  categories?: Array<{
    badge: string;
    title: string;
    thresholds: Array<{ label: string; value: string }>;
    requirementsTitle?: string;
    requirements: string[];
  }>;
  
  // Style options
  backgroundColor?: string;
  showNumbers?: boolean;
  centerContent?: boolean;
  note?: string;
  highlight?: string;
}

const {
  sectionBadge,
  title,
  subtitle,
  variant = 'grid',
  columns = 3,
  services = [],
  sections = [],
  categories = [],
  backgroundColor = 'transparent',
  showNumbers = false,
  centerContent = true,
  note,
  highlight
} = Astro.props;

// Determine grid columns class
const getGridClass = () => {
  if (variant === 'presentation') return 'services-presentation';
  if (variant === 'list') return 'services-list';
  return `services-grid services-grid-${columns}`;
};

// Get icon SVG
const getIconSVG = (icon?: string) => {
  const icons = {
    'chart': `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="18" y1="20" x2="18" y2="10"></line>
      <line x1="12" y1="20" x2="12" y2="4"></line>
      <line x1="6" y1="20" x2="6" y2="14"></line>
    </svg>`,
    'check': `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M9 11l3 3L22 4"></path>
      <path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"></path>
    </svg>`,
    'arrow': `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="5" y1="12" x2="19" y2="12"></line>
      <polyline points="12 5 19 12 12 19"></polyline>
    </svg>`,
    'default': `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>`
  };
  return icons[icon || ''] || icons.default;
};
---

<section class="services-section" style={`background: ${backgroundColor};`}>
  {(title || subtitle) && (
    <SectionTitle 
      badge={sectionBadge}
      title={title}
      subtitle={subtitle}
    />
  )}
  
  <div class="container">
    <div class={getGridClass()}>
      {/* Grid Variant - Simple cards like ServicesHighlight */}
      {variant === 'grid' && services.map((service) => (
        service.href ? (
          <a href={service.href} class="service-card service-card-link">
            <article>
              <h3>{service.title}</h3>
              {service.description && <p>{service.description}</p>}
            </article>
          </a>
        ) : (
          <div class="service-card">
            <article>
              <h3>{service.title}</h3>
              {service.description && <p>{service.description}</p>}
            </article>
          </div>
        )
      ))}
      
      {/* Cards Variant - Detailed cards with features */}
      {variant === 'cards' && services.map((service, index) => (
        <div class={`service-card service-card-detailed ${service.accent ? `accent-${service.accent}` : ''}`}>
          <article>
            {showNumbers && (
              <span class="service-number">{(index + 1).toString().padStart(2, '0')}</span>
            )}
            {service.icon && (
              <div class="service-icon" set:html={getIconSVG(service.icon)} />
            )}
            <h3>{service.title}</h3>
            {service.description && (
              <p class="service-description">{service.description}</p>
            )}
            {service.features && service.features.length > 0 && (
              <ul class="service-features">
                {service.features.map(feature => (
                  <li>{feature}</li>
                ))}
              </ul>
            )}
            {service.price && (
              <div class="service-price">{service.price}</div>
            )}
            {service.href && (
              <a href={service.href} class="service-cta">
                {service.ctaText || 'En savoir plus'}
              </a>
            )}
          </article>
        </div>
      ))}
      
      {/* List Variant - Info sections */}
      {variant === 'list' && sections.map((section) => (
        <div class="service-section-box">
          <h3>{section.title}</h3>
          {section.content && <p>{section.content}</p>}
          {section.items && section.items.length > 0 && (
            <ul class="section-items">
              {section.items.map(item => (
                <li>
                  <span class="item-label">{item.label}</span>
                  {item.value && <span class="item-value">{item.value}</span>}
                </li>
              ))}
            </ul>
          )}
          {section.footer && (
            <div class="section-footer">{section.footer}</div>
          )}
        </div>
      ))}
      
      {/* Presentation Variant - Rich content blocks */}
      {variant === 'presentation' && services.map((service) => (
        <div class="service-presentation-box">
          <h3>{service.title}</h3>
          {Array.isArray(service.content) ? (
            <ul class={`presentation-list style-${service.bulletStyle || 'disc'}`}>
              {service.content.map(item => (
                <li>{item}</li>
              ))}
            </ul>
          ) : (
            <div class="presentation-content">
              <p>{service.content || service.description}</p>
            </div>
          )}
        </div>
      ))}
      
      {/* Categories Variant - Company classifications */}
      {variant === 'categories' && categories.map((category) => (
        <div class="category-card">
          <div class="category-badge">{category.badge}</div>
          <h3>{category.title}</h3>
          
          <div class="thresholds-section">
            {category.thresholds.map(threshold => (
              <div class="threshold-item">
                <span class="threshold-label">{threshold.label}</span>
                <span class="threshold-value">{threshold.value}</span>
              </div>
            ))}
          </div>
          
          {category.requirementsTitle && (
            <h4 class="requirements-title">{category.requirementsTitle}</h4>
          )}
          <ul class="requirements-list">
            {category.requirements.map(req => (
              <li>{req}</li>
            ))}
          </ul>
        </div>
      ))}
    </div>
    
    {/* Note for categories variant */}
    {variant === 'categories' && note && (
      <div class="categories-note">
        <p>{note}</p>
      </div>
    )}
    
    {/* Optional slot for additional content */}
    <slot />
  </div>
</section>

<style>
  .services-section {
    padding: 0 0 6rem 0;
    position: relative;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  /* Grid layouts */
  .services-grid {
    display: grid;
    gap: 2rem;
    position: relative;
  }
  
  .services-grid-2 {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .services-grid-3 {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .services-grid-4 {
    grid-template-columns: repeat(4, 1fr);
  }
  
  .services-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .services-presentation {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    max-width: 900px;
    margin: 0 auto;
  }
  
  /* Base Service Card - Modern style from ServicesHighlight */
  .service-card {
    text-decoration: none;
    color: inherit;
    display: block;
    height: 100%;
  }
  
  .service-card article {
    background: linear-gradient(180deg, #ffffff 0%, #fafbfc 100%);
    border: 1px solid transparent;
    border-radius: 12px;
    padding: 2.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: 100%;
    box-shadow: 0 4px 20px -4px rgba(0, 0, 0, 0.08);
    position: relative;
    overflow: hidden;
  }
  
  /* Accent bar at top */
  .service-card article::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
    opacity: 0;
  }
  
  .service-card:hover article,
  .service-card-link:hover article {
    box-shadow: 0 8px 30px -8px rgba(0, 0, 0, 0.12);
    border-color: #e2e8f0;
    background: #ffffff;
  }
  
  .service-card:hover article::before,
  .service-card-link:hover article::before {
    opacity: 1;
  }
  
  /* Typography */
  .service-card h3 {
    font-size: 1.25rem;
    color: #0f172a;
    margin: 0;
    line-height: 1.3;
    font-weight: 700;
    letter-spacing: -0.02em;
    position: relative;
  }
  
  .service-card:hover h3,
  .service-card-link:hover h3 {
    color: #3b82f6;
  }
  
  .service-card p {
    color: #64748b;
    line-height: 1.7;
    flex-grow: 1;
    margin: 0;
    font-size: 0.9375rem;
    font-weight: 400;
  }
  
  /* Link indicator arrow */
  .service-card-link article::after {
    content: '→';
    position: absolute;
    bottom: 2rem;
    right: 2rem;
    font-size: 1.25rem;
    color: #cbd5e1;
    opacity: 0;
  }
  
  .service-card-link:hover article::after {
    opacity: 1;
    color: #3b82f6;
  }
  
  /* Detailed Card Variant */
  .service-card-detailed article {
    padding: 2rem;
  }
  
  .service-number {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 2rem;
    font-weight: 700;
    color: rgba(59, 130, 246, 0.1);
    line-height: 1;
  }
  
  .service-icon {
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(96, 165, 250, 0.05));
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #3b82f6;
    margin-bottom: 1rem;
  }
  
  .service-card-detailed:hover .service-icon {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(96, 165, 250, 0.08));
  }
  
  .service-description {
    font-size: 0.9375rem;
    margin: 0.75rem 0;
  }
  
  .service-features {
    list-style: none;
    padding: 0;
    margin: 1rem 0;
  }
  
  .service-features li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    color: #64748b;
    line-height: 1.5;
  }
  
  .service-features li::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: #3b82f6;
    font-weight: 600;
  }
  
  .service-price {
    font-size: 1.5rem;
    font-weight: 700;
    color: #3b82f6;
    margin: 1rem 0;
  }
  
  .service-cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1rem;
    background: #3b82f6;
    color: white;
    border-radius: 9999px;
    font-weight: 500;
    font-size: 0.8125rem;
    text-decoration: none;
    margin-top: auto;
    align-self: flex-start;
    transition: opacity 0.2s ease, box-shadow 0.2s ease;
  }
  
  .service-cta:hover {
    background: #2563eb;
    box-shadow: 0 4px 12px -4px rgba(59, 130, 246, 0.3);
  }
  
  /* Accent colors */
  .accent-gold article::before {
    background: linear-gradient(90deg, #f59e0b, #fbbf24);
  }
  
  .accent-gray article::before {
    background: linear-gradient(90deg, #6b7280, #9ca3af);
  }
  
  /* List/Section variant */
  .service-section-box {
    background: #ffffff;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    height: 100%;
  }
  
  .service-section-box h3 {
    font-size: 1.125rem;
    color: #0f172a;
    margin: 0 0 1rem 0;
    font-weight: 600;
  }
  
  .section-items {
    list-style: none;
    padding: 0;
    margin: 1rem 0;
  }
  
  .section-items li {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    border-bottom: 1px solid #f1f5f9;
  }
  
  .section-items li:last-child {
    border-bottom: none;
  }
  
  .item-label {
    color: #475569;
    font-size: 0.9375rem;
  }
  
  .item-value {
    color: #0f172a;
    font-weight: 600;
    font-size: 0.9375rem;
  }
  
  .section-footer {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #f1f5f9;
    font-size: 0.875rem;
    color: #64748b;
  }
  
  /* Presentation variant */
  .service-presentation-box {
    background: linear-gradient(180deg, #ffffff 0%, #fafbfc 100%);
    border: 1px solid #e2e8f0;
    border-radius: 16px;
    padding: 2.5rem;
    box-shadow: 0 4px 20px -4px rgba(0, 0, 0, 0.08);
  }
  
  .service-presentation-box h3 {
    font-size: 1.5rem;
    color: #0f172a;
    margin: 0 0 1.5rem 0;
    font-weight: 700;
    letter-spacing: -0.02em;
  }
  
  .presentation-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .presentation-list li {
    position: relative;
    padding-left: 2rem;
    margin-bottom: 1rem;
    font-size: 0.9375rem;
    color: #475569;
    line-height: 1.7;
  }
  
  .presentation-list.style-check li::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: #3b82f6;
    font-weight: 600;
    font-size: 1.125rem;
  }
  
  .presentation-list.style-arrow li::before {
    content: '→';
    position: absolute;
    left: 0;
    color: #3b82f6;
    font-weight: 600;
  }
  
  .presentation-list.style-disc li::before {
    content: '•';
    position: absolute;
    left: 0.5rem;
    color: #3b82f6;
    font-weight: 600;
  }
  
  .presentation-content p {
    font-size: 0.9375rem;
    color: #475569;
    line-height: 1.7;
    margin: 0;
  }
  
  /* Categories variant */
  .category-card {
    background: linear-gradient(180deg, #ffffff 0%, #fafbfc 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    position: relative;
    box-shadow: 0 4px 20px -4px rgba(0, 0, 0, 0.08);
  }
  
  .category-card:hover {
    box-shadow: 0 8px 30px -8px rgba(0, 0, 0, 0.12);
    background: #ffffff;
  }
  
  .category-badge {
    display: inline-block;
    background: linear-gradient(135deg, #3b82f6, #60a5fa);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.05em;
    margin-bottom: 1rem;
  }
  
  .category-card h3 {
    font-size: 1.25rem;
    color: #0f172a;
    margin: 0 0 1.5rem 0;
    font-weight: 700;
    letter-spacing: -0.02em;
  }
  
  .thresholds-section {
    background: #f8fafc;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .threshold-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
  }
  
  .threshold-item:not(:last-child) {
    border-bottom: 1px solid #e2e8f0;
  }
  
  .threshold-label {
    font-size: 0.875rem;
    color: #64748b;
  }
  
  .threshold-value {
    font-size: 0.875rem;
    font-weight: 600;
    color: #0f172a;
  }
  
  .requirements-title {
    font-size: 0.9375rem;
    color: #475569;
    margin: 0 0 0.75rem 0;
    font-weight: 600;
  }
  
  .category-card .requirements-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .category-card .requirements-list li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    color: #64748b;
    line-height: 1.5;
  }
  
  .category-card .requirements-list li::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: #3b82f6;
    font-weight: 600;
  }
  
  .categories-note {
    max-width: 900px;
    margin: 2rem auto 0;
    padding: 1.25rem;
    background: #fef3c7;
    border-left: 4px solid #f59e0b;
    border-radius: 8px;
  }
  
  .categories-note p {
    font-size: 0.875rem;
    color: #78350f;
    line-height: 1.6;
    margin: 0;
  }
  
  /* Responsive */
  @media (max-width: 1024px) {
    .services-grid-4 {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .services-grid-3 {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 768px) {
    .services-section {
      padding: 0 0 3rem 0;
    }
    
    .container {
      padding: 0 1.5rem;
    }
    
    .services-grid {
      gap: 1.25rem;
    }
    
    .services-grid-2,
    .services-grid-3,
    .services-grid-4 {
      grid-template-columns: 1fr;
    }
    
    .service-card article {
      padding: 1.75rem;
    }
    
    .service-card h3 {
      font-size: 1.0625rem;
    }
    
    .service-card p {
      font-size: 0.875rem;
    }
    
    .service-card article::after {
      bottom: 1.75rem;
      right: 1.75rem;
    }
  }
</style>