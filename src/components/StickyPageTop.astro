---

export interface Props {
  breadcrumbItems: Array<{ text: string; href?: string }>;
  title: string;
  subtitle?: string;
  showSearch?: boolean;
  searchPlaceholder?: string;
  lang?: 'fr' | 'en';
  showProgress?: boolean;
  showFilters?: boolean;
  categories?: Array<{ name: string; slug: string; count?: number }>;
}
const { 
  breadcrumbItems = [], 
  title, 
  subtitle, 
  showSearch = false,
  searchPlaceholder = "Rechercher...",
  lang = 'fr',
  showProgress = false,
  showFilters = false,
  categories = []
} = Astro.props;
const items = [...breadcrumbItems, { text: title }];
---
<nav class="breadcrumbs" aria-label="Fil d'Ariane">
  <div class="container">
    <div class="breadcrumb-content">
      <ol>
        {items.map((item, i) => {
          const last = i === items.length - 1;
          return (
            <li>
              {last ? (
                <h1 class="current" aria-current="page">{item.text}</h1>
              ) : (
                <a href={item.href} class="link">{item.text}</a>
              )}
            </li>
          );
        })}
      </ol>
      {showSearch && (
        <div class="breadcrumb-search">
          <form action={`/${lang}/${lang === 'fr' ? 'recherche' : 'search'}`} method="get" class="search-form">
            <input 
              type="search" 
              name="q" 
              placeholder={searchPlaceholder}
              class="search-input"
              aria-label={searchPlaceholder}
            />
            <button type="submit" class="search-button" aria-label="Rechercher">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </button>
          </form>
        </div>
      )}
    </div>
  </div>
  {showFilters && categories.length > 0 && (
    <div class="filters-container">
      <div class="container">
        <div class="filters-wrapper">
          <button 
            class="filter-pill active" 
            data-category="all"
            aria-pressed="true"
          >
            {lang === 'fr' ? 'Tous' : 'All'}
          </button>
          {categories.map(category => (
            <button 
              class="filter-pill" 
              data-category={category.slug}
              aria-pressed="false"
            >
              {category.name}
              {category.count && <span class="filter-count">{category.count}</span>}
            </button>
          ))}
        </div>
      </div>
    </div>
  )}
  {showProgress && (
    <div class="reading-progress-bar" aria-hidden="true">
      <div class="reading-progress-fill" data-reading-progress></div>
    </div>
  )}
</nav>
{subtitle && (
  <section class="subtitle">
    <div class="container">
      <p class="subtitle-text">{subtitle}</p>
    </div>
  </section>
)}
<style>
  .container {
    max-width: 1280px;
    margin-inline: auto;
    padding-inline: 2rem;
  }
  .breadcrumbs {
    position: sticky;
    top: 60px;
    z-index: 999;
    background: var(--breadcrumb-bg);
  }
  .breadcrumbs .container {
    padding-block: 0.5rem;
  }
  .breadcrumb-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }
  /* List */
  ol {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 0.875rem;
    line-height: 1;
  }
  li { display: flex; align-items: center; }
  /* Separator */
  li + li::before {
    content: "›";
    margin: 0 0.25rem;
    color: var(--breadcrumb-separator);
  }
  /* Links */
  .link {
    display: inline-block;
    padding: 0.375rem 0.75rem;
    text-decoration: none;
    border-radius: 4px;
    color: var(--breadcrumb-link);
    font-weight: 500;
    position: relative;
    z-index: 1;
    cursor: pointer;
  }
  .link:hover { 
    background: rgba(255, 255, 255, 0.1); 
    color: var(--breadcrumb-link-hover); 
  }
  /* Current */
  .current {
    margin: 0;
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--breadcrumb-fg);
  }
  .subtitle {
    padding: 0;
    background: transparent;
    position: relative;
    z-index: 10;
  }
  
  .subtitle .container {
    max-width: 1280px;
    background: var(--white);
    border-radius: 0 0 12px 12px;
    padding: 40px 50px;
    box-shadow: 0 4px 12px var(--card-shadow-hover);
    margin-top: -1px; /* Pour coller au breadcrumb */
  }
  
  .subtitle-text {
    margin: 0;
    font-size: var(--card-subtitle);
    line-height: 1.6;
    color: var(--fg-secondary);
    font-weight: 400;
    text-align: center;
  }
  /* Search Form Styles */
  .breadcrumb-search {
    flex-shrink: 0;
  }
  .search-form {
    display: flex;
    align-items: center;
    position: relative;
  }
  .search-input {
    padding: 0.375rem 2.5rem 0.375rem 0.875rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: var(--breadcrumb-fg);
    font-size: 0.875rem;
    width: 200px;
  }
  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
  }
  .search-input:focus {
    outline: none;
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }
  .search-button {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: var(--breadcrumb-fg);
    padding: 0.375rem;
    cursor: pointer;
  }
  .search-button:hover {
    opacity: 0.8;
  }
  /* Reading Progress Bar */
  .reading-progress-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: rgba(255, 255, 255, 0.1);
    overflow: hidden;
  }
  .reading-progress-fill {
    height: 100%;
    background: #ffffff;
    width: 0%;
    transition: width 0.1s ease-out;
  }
  /* Mobile */
  @media (max-width: 768px) {
    .container {
      padding-inline: 1rem;
    }
    .breadcrumbs .container {
      padding-block: 0.375rem;
    }
    ol { font-size: 0.75rem; }
    .link, .current { padding: 0.25rem 0.5rem; }
    .subtitle .container { 
      padding: 30px 24px;
      border-radius: 0 0 8px 8px;
    }
    .subtitle-text { 
      font-size: var(--card-subtitle-mobile);
    }
    /* Hide search on mobile */
    .breadcrumb-search {
      display: none;
    }
  }
  
  /* Filters Container */
  .filters-container {
    background: var(--white);
    border-top: 1px solid var(--card-border);
    padding: 12px 0;
  }
  
  .filters-wrapper {
    display: flex;
    gap: 8px;
    align-items: center;
    overflow-x: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--gray-lighter) transparent;
    padding: 4px 0;
  }
  
  .filters-wrapper::-webkit-scrollbar {
    height: 6px;
  }
  
  .filters-wrapper::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .filters-wrapper::-webkit-scrollbar-thumb {
    background: var(--gray-lighter);
    border-radius: 3px;
  }
  
  .filter-pill {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 16px;
    background: var(--bg);
    color: var(--fg-secondary);
    border: 1px solid var(--card-border);
    border-radius: 20px;
    font-family: var(--font-family);
    font-size: var(--text-sm);
    font-weight: 500;
    white-space: nowrap;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }
  
  .filter-pill:hover {
    background: var(--white);
    border-color: var(--accent);
    color: var(--accent);
    transform: translateY(-1px);
  }
  
  .filter-pill.active {
    background: var(--accent);
    color: var(--white);
    border-color: var(--accent);
  }
  
  .filter-pill.active:hover {
    background: var(--accent-dark);
    border-color: var(--accent-dark);
  }
  
  .filter-count {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 20px;
    height: 20px;
    padding: 0 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    font-size: 11px;
    font-weight: 600;
  }
  
  .filter-pill:not(.active) .filter-count {
    background: var(--card-border);
    color: var(--gray-muted);
  }
  
  /* Mobile filters */
  @media (max-width: 768px) {
    .filters-container {
      padding: 10px 0;
    }
    
    .filter-pill {
      padding: 6px 12px;
      font-size: var(--text-sm-mobile);
    }
  }

</style>

{showFilters && (
  <script is:inline>
    // Attendre que le DOM soit chargé
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initFilters);
    } else {
      initFilters();
    }
    
    function initFilters() {
      const filterButtons = document.querySelectorAll('.filter-pill');
      
      filterButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget;
          const category = target.dataset.category;
          
          console.log('Filter clicked:', category);
          
          // Update active state
          filterButtons.forEach(btn => {
            btn.classList.remove('active');
            btn.setAttribute('aria-pressed', 'false');
          });
          target.classList.add('active');
          target.setAttribute('aria-pressed', 'true');
          
          // Attendre que la fonction soit disponible
          function tryFilter() {
            if (typeof window.filterArticles === 'function') {
              window.filterArticles(category);
            } else {
              // Réessayer après un court délai
              setTimeout(tryFilter, 100);
            }
          }
          
          tryFilter();
        });
      });
    }
  </script>
)}

{showProgress && (
  <script is:inline>
    // Reading progress bar
    function updateReadingProgress() {
      const progressBar = document.querySelector('[data-reading-progress]');
      if (!progressBar) return;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const scrollTop = window.scrollY;
      const scrollableHeight = documentHeight - windowHeight;
      const scrollProgress = (scrollTop / scrollableHeight) * 100;
      progressBar.style.width = `${Math.min(scrollProgress, 100)}%`;
    }
    // Throttle function for performance
    function throttle(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      updateReadingProgress();
      // Update on scroll with throttling
      window.addEventListener('scroll', throttle(updateReadingProgress, 10), { passive: true });
      // Update on resize
      window.addEventListener('resize', throttle(updateReadingProgress, 100), { passive: true });
    });
  </script>
)}