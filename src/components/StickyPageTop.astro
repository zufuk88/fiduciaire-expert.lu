---

export interface Props {
  breadcrumbItems: Array<{ text: string; href?: string }>;
  title: string;
  subtitle?: string;
  showSearch?: boolean;
  searchPlaceholder?: string;
  lang?: 'fr' | 'en';
  showProgress?: boolean;
}
const { 
  breadcrumbItems = [], 
  title, 
  subtitle, 
  showSearch = false,
  searchPlaceholder = "Rechercher...",
  lang = 'fr',
  showProgress = false
} = Astro.props;
const items = [...breadcrumbItems, { text: title }];
---
<nav class="breadcrumbs" aria-label="Fil d'Ariane">
  <div class="container">
    <div class="breadcrumb-content">
      <ol>
        {items.map((item, i) => {
          const last = i === items.length - 1;
          return (
            <li>
              {last ? (
                <h1 class="current" aria-current="page">{item.text}</h1>
              ) : (
                <a href={item.href} class="link">{item.text}</a>
              )}
            </li>
          );
        })}
      </ol>
      {showSearch && (
        <div class="breadcrumb-search">
          <form action={`/${lang}/${lang === 'fr' ? 'recherche' : 'search'}`} method="get" class="search-form">
            <input 
              type="search" 
              name="q" 
              placeholder={searchPlaceholder}
              class="search-input"
              aria-label={searchPlaceholder}
            />
            <button type="submit" class="search-button" aria-label="Rechercher">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </button>
          </form>
        </div>
      )}
    </div>
  </div>
  {showProgress && (
    <div class="reading-progress-bar" aria-hidden="true">
      <div class="reading-progress-fill" data-reading-progress></div>
    </div>
  )}
</nav>
{subtitle && (
  <section class="subtitle">
    <div class="container">
      <p class="subtitle-text">{subtitle}</p>
    </div>
  </section>
)}
<style>
  :root {
    --header-h: 72px; /* CORRIGÉ: hauteur réelle du header (72px au lieu de 64px) */
    --bg: rgba(30, 41, 59, 0.95);
    --fg: #fff;
    --fg-dim: rgba(255, 255, 255, 0.7);
    --container: 1280px;
    --pad-x: 2rem;
    --pad-y: 0.5rem;
  }
  @media (max-width: 768px) {
    :root { --header-h: 72px; --pad-x: 1rem; --pad-y: 0.375rem; }
  }
  .container {
    max-width: var(--container);
    margin-inline: auto;
    padding-inline: var(--pad-x);
  }
  /* Sticky bar - avec z-index inférieur au header pour éviter le chevauchement */
  .breadcrumbs {
    position: sticky;
    top: var(--header-h); /* Se positionne exactement sous le header de 72px */
    z-index: 999; /* Juste en dessous du header qui a z-index: 1000 */
    background: var(--bg);
  }
  /* Désactiver sur Chrome */
  @media screen and (-webkit-min-device-pixel-ratio:0) and (min-resolution:.001dpcm) {
    .breadcrumbs {
      background: rgba(30, 41, 59, 0.98);
    }
  }
  .breadcrumbs .container {
    padding-block: var(--pad-y);
  }
  .breadcrumb-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }
  /* List */
  ol {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 0.875rem;
    line-height: 1;
  }
  li { display: flex; align-items: center; }
  /* Separator */
  li + li::before {
    content: "›";
    margin: 0 0.25rem;
    color: var(--fg-dim);
  }
  /* Links */
  .link {
    display: inline-block;
    padding: 0.375rem 0.75rem;
    text-decoration: none;
    border-radius: 4px;
    color: rgba(255, 255, 255, 0.9);
    font-weight: 500;
    position: relative;
    z-index: 1;
    cursor: pointer;
  }
  .link:hover { 
    background: rgba(255, 255, 255, 0.95); 
    color: #2c4157; 
  }
  /* Current */
  .current {
    margin: 0;
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--fg);
  }
  /* Subtitle - Élégance austère */
  .subtitle {
    padding: 40px 20px;
    background: #fafbfc;
    position: relative;
    z-index: 10;
  }
  
  .subtitle .container {
    max-width: 900px;
  }
  
  .subtitle-text {
    margin: 0;
    font-size: 17px;
    line-height: 1.7;
    color: #525252;
    font-weight: 400;
    text-align: center;
    letter-spacing: 0.02em;
  }
  /* Search Form Styles */
  .breadcrumb-search {
    flex-shrink: 0;
  }
  .search-form {
    display: flex;
    align-items: center;
    position: relative;
  }
  .search-input {
    padding: 0.375rem 2.5rem 0.375rem 0.875rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: var(--fg);
    font-size: 0.875rem;
    width: 200px;
  }
  .search-input::placeholder {
    color: var(--fg-dim);
  }
  .search-input:focus {
    outline: none;
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }
  .search-button {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: var(--fg);
    padding: 0.375rem;
    cursor: pointer;
  }
  .search-button:hover {
    opacity: 0.8;
  }
  /* Reading Progress Bar */
  .reading-progress-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: rgba(255, 255, 255, 0.1);
    overflow: hidden;
  }
  .reading-progress-fill {
    height: 100%;
    background: #1e3a5f;
    width: 0%;
  }
  /* Mobile */
  @media (max-width: 768px) {
    ol { font-size: 0.75rem; }
    .link, .current { padding: 0.25rem 0.5rem; }
    .subtitle { 
      padding: 32px 16px;
    }
    .subtitle-text { 
      font-size: 15px;
    }
    /* Hide search on mobile */
    .breadcrumb-search {
      display: none;
    }
  }

  /* Support du mode sombre */
  @media (prefers-color-scheme: dark) {
    .breadcrumbs {
      background: rgba(15, 23, 42, 0.95);
    }

    .subtitle {
      background: #0f172a;
    }

    .subtitle-text {
      color: #94a3b8;
    }

    .reading-progress-fill {
      background: #60a5fa;
    }
  }

  /* Support du mode sombre avec classe sur body */
  :global(body.dark) .breadcrumbs {
    background: rgba(15, 23, 42, 0.95);
  }

  :global(body.dark) .subtitle {
    background: #0f172a;
  }

  :global(body.dark) .subtitle-text {
    color: #94a3b8;
  }

  :global(body.dark) .reading-progress-fill {
    background: #60a5fa;
  }

  /* Support du mode sombre avec attribut data-theme */
  :global([data-theme="dark"]) .breadcrumbs {
    background: rgba(15, 23, 42, 0.95);
  }

  :global([data-theme="dark"]) .subtitle {
    background: #0f172a;
  }

  :global([data-theme="dark"]) .subtitle-text {
    color: #94a3b8;
  }

  :global([data-theme="dark"]) .reading-progress-fill {
    background: #60a5fa;
  }
</style>
{showProgress && (
  <script is:inline>
    // Reading progress bar
    function updateReadingProgress() {
      const progressBar = document.querySelector('[data-reading-progress]');
      if (!progressBar) return;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const scrollTop = window.scrollY;
      const scrollableHeight = documentHeight - windowHeight;
      const scrollProgress = (scrollTop / scrollableHeight) * 100;
      progressBar.style.width = `${Math.min(scrollProgress, 100)}%`;
    }
    // Throttle function for performance
    function throttle(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      updateReadingProgress();
      // Update on scroll with throttling
      window.addEventListener('scroll', throttle(updateReadingProgress, 10), { passive: true });
      // Update on resize
      window.addEventListener('resize', throttle(updateReadingProgress, 100), { passive: true });
    });
  </script>
)}