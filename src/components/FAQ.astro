---
import SectionTitle from './SectionTitle.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  faqItems: Array<{
    question: string;
    answer: string;
  }>;
  generateSchema?: boolean;
}

const {
  title = "Questions Fréquentes",
  subtitle = "Les réponses claires à vos interrogations les plus courantes",
  faqItems,
  generateSchema = true
} = Astro.props;

// Génération du schéma si demandé
const faqSchema = generateSchema ? {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqItems.map(item => ({
    "@type": "Question",
    "name": item.question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": item.answer
    }
  }))
} : null;
---

<section class="faq">
  <SectionTitle 
    title={title}
    subtitle={subtitle}
  />
  
  <div class="container">
    <div class="accordion">
      {faqItems.map((item) => (
        <details class="item">
          <summary class="question">
            <span>{item.question}</span>
            <span class="icon">+</span>
          </summary>
          <div class="answer">
            <p>{item.answer}</p>
          </div>
        </details>
      ))}
    </div>
  </div>
  
  {generateSchema && faqSchema && (
    <script type="application/ld+json" set:html={JSON.stringify(faqSchema)} is:inline />
  )}
</section>

<style>
  .faq {
    padding: 140px 20px 160px;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
  }

  .accordion {
    margin-top: 64px;
  }

  .item {
    border-bottom: 1px solid var(--card-border);
    margin-bottom: 8px;
    background: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--card-border);
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .item:last-child {
    border-bottom: 1px solid var(--card-border);
  }
  
  .item:hover {
    border-color: var(--muted);
    box-shadow: var(--shadow-sm);
  }

  .question {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 36px 48px;
    cursor: pointer;
    list-style: none;
    font-size: var(--font-h3);
    font-weight: 600;
    color: var(--primary);
    line-height: 1.4;
    background: transparent;
    border: none;
    transition: color 0.2s ease;
  }

  .question::-webkit-details-marker {
    display: none;
  }

  .question:hover {
    color: var(--accent-hover);
  }

  .icon {
    font-size: var(--font-h2);
    font-weight: 300;
    color: var(--accent);
    transition: all 0.2s ease;
    min-width: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .item[open] .icon {
    transform: rotate(45deg);
    color: var(--accent-hover);
  }

  .answer {
    padding: 28px 48px 40px 48px;
    border-top: 1px solid var(--card-border);
    background: white;
    margin-top: 0;
  }

  .answer p {
    font-size: var(--font-body);
    line-height: 1.8;
    color: var(--fg-secondary);
    margin: 20px 0 0 0;
  }

  @media (max-width: 768px) {
    .faq {
      padding: 100px 20px 120px;
    }

    .accordion {
      margin-top: 48px;
    }

    .question {
      padding: 32px 32px;
      font-size: var(--font-h4);
    }

    .answer {
      padding: 24px 32px 36px 32px;
    }
    
    .icon {
      font-size: var(--font-h3);
      min-width: 28px;
    }
  }

  @media (max-width: 480px) {
    .faq {
      padding: 80px 16px 100px;
    }
    
    .question {
      padding: 28px 28px;
    }

    .answer {
      padding: 20px 28px 32px 28px;
    }
  }


    .item {
      border-bottom-color: var(--card-border);
    }

    .question {
      color: var(--fg);
    }

    .question:hover {
      color: var(--muted);
    }

    .icon {
      color: var(--muted);
    }

    .answer p {
      color: var(--muted);
    }
  }












</style>

<script>
  // Fermer les autres items quand on en ouvre un
  document.addEventListener('DOMContentLoaded', () => {
    const items = document.querySelectorAll('.item');
    
    items.forEach(item => {
      item.addEventListener('toggle', (e) => {
        if (item.hasAttribute('open')) {
          // Fermer les autres
          items.forEach(other => {
            if (other !== item && other.hasAttribute('open')) {
              other.removeAttribute('open');
            }
          });
        }
      });
    });
  });
</script>