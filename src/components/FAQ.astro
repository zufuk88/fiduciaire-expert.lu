---
import SectionTitle from './SectionTitle.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  faqItems: Array<{
    question: string;
    answer: string;
  }>;
  generateSchema?: boolean;
}

const {
  title = "Questions Fréquentes",
  subtitle = "Les réponses claires à vos interrogations les plus courantes",
  faqItems,
  generateSchema = true
} = Astro.props;

// Génération du schéma si demandé
const faqSchema = generateSchema ? {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqItems.map(item => ({
    "@type": "Question",
    "name": item.question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": item.answer
    }
  }))
} : null;
---

<section class="faq">
  <SectionTitle 
    title={title}
    subtitle={subtitle}
  />
  
  <div class="container">
    <div class="accordion">
      {faqItems.map((item) => (
        <details class="item">
          <summary class="question">
            <span>{item.question}</span>
            <span class="icon">+</span>
          </summary>
          <div class="answer">
            <p>{item.answer}</p>
          </div>
        </details>
      ))}
    </div>
  </div>
  
  {generateSchema && faqSchema && (
    <script type="application/ld+json" set:html={JSON.stringify(faqSchema)} is:inline />
  )}
</section>

<style>
  .faq {
    padding: 120px 20px 140px;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
  }

  .accordion {
    margin-top: 48px;
  }

  .item {
    border-bottom: 1px solid #e5e7eb;
    margin-bottom: 0;
  }

  .item:last-child {
    border-bottom: none;
  }

  .question {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 20px 0;
    cursor: pointer;
    list-style: none;
    font-size: var(--font-h3);
    font-weight: 600;
    color: #1e3a5f;
    line-height: 1.4;
  }

  .question::-webkit-details-marker {
    display: none;
  }

  .question:hover {
    color: #4b5563;
  }

  .icon {
    font-size: var(--font-h3);
    font-weight: 400;
    color: #6b7280;
    transition: transform 0.2s;
  }

  .item[open] .icon {
    transform: rotate(45deg);
  }

  .answer {
    padding: 0 0 20px 0;
  }

  .answer p {
    font-size: var(--font-body);
    line-height: 1.7;
    color: #525252;
    margin: 0;
  }

  @media (max-width: 768px) {
    .faq {
      padding: 80px 20px 100px;
    }

    .accordion {
      margin-top: 36px;
    }

    .question {
      padding: 16px 0;
    }

    .answer {
      padding: 0 0 16px 0;
    }
  }

  @media (max-width: 480px) {
    .faq {
      padding: 60px 16px 80px;
    }
  }

  /* Support du mode sombre */
  @media (prefers-color-scheme: dark) {
    .faq {
      background: #0f172a;
    }

    .item {
      border-bottom-color: #334155;
    }

    .question {
      color: #f1f5f9;
    }

    .question:hover {
      color: #e2e8f0;
    }

    .icon {
      color: #94a3b8;
    }

    .answer p {
      color: #94a3b8;
    }
  }

  /* Support du mode sombre avec classe sur body */
  :global(body.dark) .faq {
    background: #0f172a;
  }

  :global(body.dark) .item {
    border-bottom-color: #334155;
  }

  :global(body.dark) .question {
    color: #f1f5f9;
  }

  :global(body.dark) .question:hover {
    color: #e2e8f0;
  }

  :global(body.dark) .icon {
    color: #94a3b8;
  }

  :global(body.dark) .answer p {
    color: #94a3b8;
  }

  /* Support du mode sombre avec attribut data-theme */
  :global([data-theme="dark"]) .faq {
    background: #0f172a;
  }

  :global([data-theme="dark"]) .item {
    border-bottom-color: #334155;
  }

  :global([data-theme="dark"]) .question {
    color: #f1f5f9;
  }

  :global([data-theme="dark"]) .question:hover {
    color: #e2e8f0;
  }

  :global([data-theme="dark"]) .icon {
    color: #94a3b8;
  }

  :global([data-theme="dark"]) .answer p {
    color: #94a3b8;
  }
</style>

<script>
  // Fermer les autres items quand on en ouvre un
  document.addEventListener('DOMContentLoaded', () => {
    const items = document.querySelectorAll('.item');
    
    items.forEach(item => {
      item.addEventListener('toggle', (e) => {
        if (item.hasAttribute('open')) {
          // Fermer les autres
          items.forEach(other => {
            if (other !== item && other.hasAttribute('open')) {
              other.removeAttribute('open');
            }
          });
        }
      });
    });
  });
</script>