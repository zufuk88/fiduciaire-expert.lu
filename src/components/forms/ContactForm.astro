---
import Button from '../ui/Button.astro';
export interface Props {
  lang?: 'fr' | 'en';
  action?: string;
}
const { 
  lang = 'fr', 
  action
} = Astro.props;
// Déterminer l'URL de redirection en fonction de la langue
// Pour Netlify Forms, on utilise des URLs absolues
const redirectUrl = action || (lang === 'fr' ? `${Astro.site}/fr/merci` : `${Astro.site}/en/contact/thank-you`);
// Traductions
const translations = {
  fr: {
    title: "Envoyez-nous un message",
    subtitle: "Recevez une proposition personnalisée sous 48h",
    name: "Nom complet",
    namePlaceholder: "Jean Dupont",
    email: "Adresse e-mail",
    emailPlaceholder: "jean.dupont@exemple.com",
    message: "Votre message",
    messagePlaceholder: "Décrivez votre projet, vos besoins ou vos questions...",
    submit: "Envoyer ma demande",
    required: "Obligatoire",
    sending: "Envoi en cours..."
  },
  en: {
    title: "Send us a message",
    subtitle: "Receive a personalized proposal within 48h",
    name: "Full name",
    namePlaceholder: "John Doe",
    email: "Email address",
    emailPlaceholder: "john.doe@example.com",
    message: "Your message",
    messagePlaceholder: "Describe your project, needs or questions...",
    submit: "Send my request",
    required: "Required",
    sending: "Sending..."
  }
};
const t = translations[lang];
---
<div 
  class={`form-container ${lang === 'fr' ? 'form-container--fr' : ''}`} 
  data-sticky-form 
  data-lang={lang}
>
  <div class="form-header">
    <h2>{t.title}</h2>
    <p>{t.subtitle}</p>
  </div>
  <form 
    name="contact-fiduciaire"
    method="POST" 
    data-netlify="true" 
    data-netlify-honeypot="bot-field"
    class="contact-form"
  >
    <input type="hidden" name="form-name" value="contact-fiduciaire" />
    <input type="hidden" name="language" value={lang} />
    <input type="hidden" name="_redirect" value={redirectUrl} />
    <!-- Honeypot anti-spam -->
    <div class="visually-hidden">
      <label>Ne pas remplir: <input name="bot-field" tabindex="-1" /></label>
    </div>
    <!-- Nom et Email -->
    <div class="form-row">
      <div class="form-group">
        <label for="name" class="form-label">
          <span>{t.name}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <input 
            type="text" 
            id="name" 
            name="name" 
            required 
            autocomplete="name" 
            placeholder={t.namePlaceholder}
            aria-required="true"
            class="form-input"
          />
        </div>
      </div>
      <div class="form-group">
        <label for="email" class="form-label">
          <span>{t.email}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            autocomplete="email" 
            placeholder={t.emailPlaceholder}
            aria-required="true"
            pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
            title={lang === 'fr' ? "Veuillez entrer une adresse email valide" : "Please enter a valid email address"}
            class="form-input"
          />
        </div>
      </div>
    </div>
    <!-- Message -->
    <div class="form-group">
      <label for="message" class="form-label">
        <span>{t.message}</span>
        <span class="required-indicator" aria-label={t.required}>*</span>
      </label>
      <div class="input-wrapper">
        <textarea 
          id="message" 
          name="message" 
          rows="5" 
          required 
          placeholder={t.messagePlaceholder}
          aria-required="true"
          class="form-input form-textarea"
        ></textarea>
      </div>
    </div>
    <!-- Bouton submit -->
    <Button type="submit" variant="primary" class="form-submit">
      <span class="submit-text">{t.submit}</span>
      <span class="submit-loading" aria-hidden="true">
        {t.sending}
      </span>
    </Button>
  </form>
</div>
<script is:inline>
  (() => {
    if (typeof window === 'undefined' || window.__feStickyFormInit) return;
    window.__feStickyFormInit = true;

    const updateParentOffset = (form) => {
      const parent = form.closest('[data-sticky-parent]');
      if (!parent) return;
      const halfHeight = Math.round(form.offsetHeight / 2);
      parent.style.setProperty('--contact-form-half-height', `${halfHeight}px`);
      const adjust = form.dataset.lang === 'fr' ? 56 : 0;
      parent.style.setProperty('--contact-form-offset-adjust', `${adjust}px`);
    };

    const setupForms = () => {
      const forms = document.querySelectorAll('.form-container[data-sticky-form]');
      forms.forEach((form) => {
        updateParentOffset(form);
        if ('ResizeObserver' in window) {
          const observer = new ResizeObserver(() => updateParentOffset(form));
          observer.observe(form);
        } else {
          window.addEventListener('resize', () => updateParentOffset(form));
        }
      });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupForms);
    } else {
      setupForms();
    }
  })();
</script>
<style>
  .form-container {
    background: var(--card);
    border-radius: 12px;
    padding: 28px 24px 24px;
    border: 1px solid var(--card-border);
    position: relative;
    overflow: hidden;
  }
  
  .form-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--accent);
  }
  .form-header {
    margin-bottom: 1.25rem;
  }
  .form-header h2 {
    font-family: var(--font-family);
    font-size: var(--card-title);
    font-weight: 600;
    color: var(--accent);
    margin: 0 0 16px 0;
    line-height: 1.3;
  }
  .form-header p {
    font-family: var(--font-family);
    font-size: var(--card-subtitle);
    color: var(--muted);
    margin: 0;
    line-height: 1.7;
  }
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }
  .form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
  }
  .form-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-family);
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--accent);
    text-transform: none;
    letter-spacing: 0;
  }
  .required-indicator {
    color: var(--accent);
    font-weight: 600;
  }
  .input-wrapper {
    position: relative;
  }
  .form-input {
    width: 100%;
    padding: 10px 14px;
    border: 1px solid var(--card-border);
    border-radius: 8px;
    font-family: var(--font-family);
    font-size: var(--text-base);
    background: var(--card);
    color: var(--accent);
    transition: all 0.2s ease;
  }
  .form-input::placeholder {
    color: var(--muted);
  }
  .form-input:hover {
    border-color: var(--muted);
  }
  .form-input:focus {
    outline: none;
    border-color: var(--accent);
    background: var(--card);
  }
  /* Fond blanc quand le champ est rempli */
  .form-input:not(:placeholder-shown) {
    background: var(--card);
  }
  .form-textarea {
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    line-height: 1.5;
  }
  .form-submit {
    align-self: flex-start;
    position: relative;
    overflow: hidden;
    min-width: 200px;
    transition: opacity 0.2s ease, box-shadow 0.2s ease;
  }
  
  .form-submit:hover {
    transform: translateY(-2px);
  }
  
  .submit-text,
  .submit-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .submit-loading {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-weight: 500;
    opacity: 0.9;
  }
  
  .form-submit:disabled .submit-text {
    display: none;
  }
  
  .form-submit:disabled .submit-loading {
    display: flex;
  }
  
  .form-submit:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  /* États de validation modernisés */
  .form-input:invalid:not(:focus):not(:placeholder-shown) {
    border-color: var(--accent);
    background: var(--bg-secondary);
    box-shadow: 0 0 0 3px rgba(248, 113, 113, 0.1);
  }
  .form-input:valid:not(:focus):not(:placeholder-shown):not(:hover) {
    border-color: var(--card-border);
    background: var(--card);
  }
  /* Responsive */
  @media (max-width: 768px) {
    .form-container {
      padding: var(--card-padding-tablet);
    }
    .form-header h2 {
      font-size: var(--card-title-mobile);
    }
    .form-header p {
      font-size: var(--card-subtitle-mobile);
    }
    .form-row {
      grid-template-columns: 1fr;
      gap: 16px;
    }
    .form-label {
      font-size: var(--text-sm-mobile);
    }
    .form-input {
      font-size: var(--text-base-mobile);
    }
    .form-container--fr .form-row {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 480px) {
    .form-container {
      padding: var(--card-padding-mobile);
    }
  }
  /* Focus visible pour accessibilité */
  .form-input:focus-visible {
    outline: none;
  }
  .form-submit:focus-visible {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
  }

  .form-container--fr .form-row {
    grid-template-columns: 1fr;
  }





































</style>
