---
import Button from '../ui/Button.astro';
export interface Props {
  lang?: 'fr' | 'en';
  action?: string;
  service?: string;
}
const { 
  lang = 'fr', 
  action,
  service = ''
} = Astro.props;
// Déterminer l'URL de redirection en fonction de la langue
// Pour Netlify Forms, on utilise des URLs absolues
const redirectUrl = action || (lang === 'fr' ? `${Astro.site}/fr/merci` : `${Astro.site}/en/contact/thank-you`);
// Traductions
const translations = {
  fr: {
    title: "Envoyez-nous un message",
    subtitle: "Recevez une proposition personnalisée sous 48h",
    name: "Nom complet",
    namePlaceholder: "Jean Dupont",
    email: "Adresse e-mail",
    emailPlaceholder: "jean.dupont@exemple.com",
    phone: "Téléphone",
    phonePlaceholder: "+352 20 60 58 57",
    service: "Service souhaité",
    selectService: "Sélectionnez un service...",
    services: {
      comptabilite: "Comptabilité",
      "creation-societe": "Création de société",
      domiciliation: "Domiciliation",
      paie: "Gestion de paie",
      "conseil-fiscal": "Conseil fiscal",
      autre: "Autre service"
    },
    message: "Votre message",
    messagePlaceholder: "Décrivez votre projet, vos besoins ou vos questions...",
    submit: "Envoyer ma demande",
    optional: "Optionnel",
    required: "Obligatoire",
    sending: "Envoi en cours...",
    privacyNote: "Vos données sont protégées et utilisées uniquement pour traiter votre demande."
  },
  en: {
    title: "Send us a message",
    subtitle: "Receive a personalized proposal within 48h",
    name: "Full name",
    namePlaceholder: "John Doe",
    email: "Email address",
    emailPlaceholder: "john.doe@example.com",
    phone: "Phone",
    phonePlaceholder: "+352 20 60 58 57",
    service: "Desired service",
    selectService: "Select a service...",
    services: {
      accounting: "Accounting",
      "company-formation": "Company formation",
      domiciliation: "Domiciliation",
      payroll: "Payroll management",
      "tax-advisory": "Tax advisory",
      other: "Other service"
    },
    message: "Your message",
    messagePlaceholder: "Describe your project, needs or questions...",
    submit: "Send my request",
    optional: "Optional",
    required: "Required",
    sending: "Sending...",
    privacyNote: "Your data is protected and used only to process your request."
  }
};
const t = translations[lang];
const services = lang === 'fr' 
  ? Object.entries(translations.fr.services)
  : Object.entries(translations.en.services);
---
<div class="form-container">
  <div class="form-header">
    <h2>{t.title}</h2>
    <p>{t.subtitle}</p>
  </div>
  <form 
    name="contact-fiduciaire"
    method="POST" 
    data-netlify="true" 
    data-netlify-honeypot="bot-field"
    class="contact-form"
  >
    <input type="hidden" name="form-name" value="contact-fiduciaire" />
    <input type="hidden" name="language" value={lang} />
    <input type="hidden" name="_redirect" value={redirectUrl} />
    <!-- Honeypot anti-spam -->
    <div class="visually-hidden">
      <label>Ne pas remplir: <input name="bot-field" tabindex="-1" /></label>
    </div>
    <!-- Nom et Email -->
    <div class="form-row">
      <div class="form-group">
        <label for="name" class="form-label">
          <span>{t.name}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <input 
            type="text" 
            id="name" 
            name="name" 
            required 
            autocomplete="name" 
            placeholder={t.namePlaceholder}
            aria-required="true"
            class="form-input"
          />
        </div>
      </div>
      <div class="form-group">
        <label for="email" class="form-label">
          <span>{t.email}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            autocomplete="email" 
            placeholder={t.emailPlaceholder}
            aria-required="true"
            pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
            title={lang === 'fr' ? "Veuillez entrer une adresse email valide" : "Please enter a valid email address"}
            class="form-input"
          />
        </div>
      </div>
    </div>
    <!-- Téléphone et Service -->
    <div class="form-row">
      <div class="form-group">
        <label for="phone" class="form-label">
          <span>{t.phone}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <input 
            type="tel" 
            id="phone" 
            name="phone" 
            required 
            autocomplete="tel" 
            placeholder={t.phonePlaceholder}
            aria-required="true"
            pattern="[+0-9\s\-\.\(\)]*"
            title={lang === 'fr' ? "Numéro de téléphone (chiffres, +, espaces, tirets autorisés)" : "Phone number (digits, +, spaces, dashes allowed)"}
            class="form-input"
          />
        </div>
      </div>
      <div class="form-group">
        <label for="service" class="form-label">
          <span>{t.service}</span>
          <span class="required-indicator" aria-label={t.required}>*</span>
        </label>
        <div class="input-wrapper">
          <select 
            id="service" 
            name="service"
            class="form-input form-select"
            required
            aria-required="true"
            value={service}
          >
            <option value="">{t.selectService}</option>
            {services.map(([value, label]) => (
              <option value={value} selected={service === value}>{label}</option>
            ))}
          </select>
          <div class="select-arrow">
            <svg width="12" height="8" viewBox="0 0 12 8" fill="none">
              <path d="M1 1.5L6 6.5L11 1.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
        </div>
      </div>
    </div>
    <!-- Message -->
    <div class="form-group">
      <label for="message" class="form-label">
        <span>{t.message}</span>
        <span class="required-indicator" aria-label={t.required}>*</span>
      </label>
      <div class="input-wrapper">
        <textarea 
          id="message" 
          name="message" 
          rows="5" 
          required 
          placeholder={t.messagePlaceholder}
          aria-required="true"
          class="form-input form-textarea"
        ></textarea>
      </div>
    </div>
    <!-- Note de confidentialité -->
    <p class="privacy-note">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
      </svg>
      {t.privacyNote}
    </p>
    <!-- Bouton submit -->
    <Button type="submit" variant="primary" class="form-submit">
      <span class="submit-text">{t.submit}</span>
      <span class="submit-loading" aria-hidden="true">
        {t.sending}
      </span>
    </Button>
  </form>
</div>
<style>
  .form-container {
    background: linear-gradient(180deg, #ffffff 0%, #fafbfc 100%);
    border-radius: 16px;
    padding: 2.5rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 20px -4px rgba(0, 0, 0, 0.08);
    position: relative;
    overflow: hidden;
  }
  
  /* Accent bar at top */
  .form-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
  }
  .form-header {
    margin-bottom: 2rem;
  }
  .form-header h2 {
    font-size: 1.875rem;
    font-weight: 700;
    color: #0f172a;
    margin: 0 0 0.75rem 0;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }
  .form-header p {
    color: #64748b;
    font-size: 1rem;
    margin: 0;
    font-weight: 400;
  }
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.75rem;
  }
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .form-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: #475569;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  .required-indicator {
    color: #f59e0b;
    font-weight: 600;
    font-size: 0.875rem;
  }
  .input-wrapper {
    position: relative;
  }
  .form-input {
    width: 100%;
    padding: 0.9375rem 1.125rem;
    border: 1px solid #e2e8f0;
    border-radius: 2px;
    font-size: 0.9375rem;
    background: #ffffff;
    color: #0f172a;
    box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.06);
    transition: opacity 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
  }
  .form-input::placeholder {
    color: #94a3b8;
  }
  .form-input:hover {
    box-shadow: 0 4px 12px -4px rgba(0, 0, 0, 0.1);
    border-color: #cbd5e1;
  }
  .form-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    background: #ffffff;
  }
  /* Fond blanc quand le champ est rempli */
  .form-input:not(:placeholder-shown) {
    background: #ffffff;
  }
  .form-select {
    appearance: none;
    padding-right: 2.5rem;
    cursor: pointer;
  }
  .select-arrow {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #94a3b8;
    transition: opacity 0.2s ease;
  }
  .form-select:focus ~ .select-arrow {
    color: #3b82f6;
  }
  .form-textarea {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
    line-height: 1.5;
  }
  .privacy-note {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.25rem;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(96, 165, 250, 0.02));
    border-radius: 2px;
    border: 1px solid rgba(59, 130, 246, 0.1);
    color: #475569;
    font-size: 0.875rem;
    margin: 0;
    line-height: 1.5;
  }
  .privacy-note svg {
    flex-shrink: 0;
    color: #3b82f6;
    width: 18px;
    height: 18px;
  }
  .form-submit {
    align-self: flex-start;
    position: relative;
    overflow: hidden;
    min-width: 200px;
    transition: opacity 0.2s ease, box-shadow 0.2s ease;
  }
  
  .form-submit:hover {
    box-shadow: 0 8px 20px -6px rgba(59, 130, 246, 0.3);
  }
  
  .submit-text,
  .submit-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .submit-loading {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-weight: 500;
    opacity: 0.9;
  }
  
  .form-submit:disabled .submit-text {
    display: none;
  }
  
  .form-submit:disabled .submit-loading {
    display: flex;
  }
  
  .form-submit:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  /* États de validation modernisés */
  .form-input:invalid:not(:focus):not(:placeholder-shown) {
    border-color: #f87171;
    background: #fef2f2;
    box-shadow: 0 0 0 3px rgba(248, 113, 113, 0.1);
  }
  .form-input:valid:not(:focus):not(:placeholder-shown):not(:hover) {
    border-color: #e2e8f0;
    background: #ffffff;
  }
  /* Responsive */
  @media (max-width: 768px) {
    .form-container {
      padding: 1.5rem;
    }
    .form-row {
      grid-template-columns: 1fr;
      gap: 1.25rem;
    }
    .form-header h2 {
      font-size: 1.5rem;
    }
  }
  /* Focus visible pour accessibilité */
  .form-input:focus-visible {
    outline: none;
  }
  .form-submit:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Validation simplifiée du téléphone - seulement chiffres et symboles autorisés
    const phoneInput = document.getElementById('phone') as HTMLInputElement;
    if (phoneInput) {
      phoneInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        let value = target.value;
        // Retirer tous les caractères non autorisés
        const cleaned = value.replace(/[^+0-9\s\-\.\(\)]/g, '');
        if (cleaned !== value) {
          target.value = cleaned;
        }
      });
    }
  });
</script>