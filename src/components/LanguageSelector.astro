---
import { languages, type Language } from '../i18n/translations';
import { getLangFromUrl, getAlternateLinks } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url) as Language;
const alternateLinks = getAlternateLinks(Astro.url);
---

<div class="language-selector">
  <button 
    class="lang-button" 
    aria-label="Select language"
    aria-expanded="false"
  >
    <span class="current-lang">{currentLang.toUpperCase()}</span>
    <svg class="chevron" width="12" height="8" viewBox="0 0 12 8" fill="none">
      <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
  </button>
  
  <div class="lang-dropdown" aria-hidden="true">
    {Object.entries(languages).map(([code, name]) => {
      const linkUrl = alternateLinks[code as Language];
      const hasTranslation = linkUrl && linkUrl !== null && typeof linkUrl === 'string';
      return hasTranslation ? (
        <a 
          href={linkUrl} 
          class:list={['lang-option', { active: code === currentLang }]}
          lang={code}
        >
          {name}
        </a>
      ) : (
        <span 
          class:list={['lang-option', 'disabled', { active: code === currentLang }]}
          lang={code}
        >
          {name}
        </span>
      );
    })}
  </div>
</div>

<style>
  .language-selector {
    position: relative;
  }

  .lang-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: transparent;
    border: 1px solid rgba(224, 224, 224, 0.8);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    color: var(--color-text, #333);
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .lang-button:hover {
    border-color: var(--color-primary, #005FCC);
    color: var(--color-primary, #005FCC);
  }

  .chevron {
    transition: transform 0.3s ease;
  }

  .lang-button[aria-expanded="true"] .chevron {
    transform: rotate(180deg);
  }

  .lang-dropdown {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    min-width: 150px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 100;
  }

  .language-selector:hover .lang-dropdown,
  .language-selector:focus-within .lang-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .lang-option {
    display: block;
    padding: 12px 16px;
    color: var(--color-text, #333);
    text-decoration: none;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }
  
  .lang-option.disabled {
    color: #ccc;
    cursor: not-allowed;
    opacity: 0.5;
    pointer-events: none;
  }

  .lang-option:not(.disabled):hover {
    background: #f5f5f5;
    color: var(--color-primary, #005FCC);
  }

  .lang-option.active {
    background: rgba(0, 95, 204, 0.05);
    color: var(--color-primary, #005FCC);
    font-weight: 600;
  }

  .lang-option:first-child {
    border-radius: 4px 4px 0 0;
  }

  .lang-option:last-child {
    border-radius: 0 0 4px 4px;
  }

  @media (max-width: 768px) {
    .lang-button {
      padding: 6px 12px;
      font-size: 0.875rem;
    }
    
    .lang-dropdown {
      min-width: 120px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('.lang-button') as HTMLButtonElement;
    const dropdown = document.querySelector('.lang-dropdown') as HTMLElement;
    
    button?.addEventListener('click', () => {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', (!isExpanded).toString());
      dropdown?.setAttribute('aria-hidden', isExpanded.toString());
    });
    
    document.addEventListener('click', (e) => {
      if (!e.target || !(e.target as Element).closest('.language-selector')) {
        button?.setAttribute('aria-expanded', 'false');
        dropdown?.setAttribute('aria-hidden', 'true');
      }
    });
  });
</script>