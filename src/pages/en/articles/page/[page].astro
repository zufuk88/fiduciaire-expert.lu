---
import { getCollection } from 'astro:content';
import LayoutI18n from '../../../../layouts/LayoutI18n.astro';
import SearchBar from '../../../../components/SearchBar.astro';
import StickyPageTop from '../../../../components/StickyPageTop.astro';
import ArticlesGrid from '../../../../components/ArticlesGrid.astro';
import { calculateReadingTime } from '../../../../utils/reading-time';
export async function getStaticPaths() {
  const POSTS_PER_PAGE = 6;
  const allPosts = await getCollection('blog');
  const englishCategories = ['Tax', 'Payroll', 'Accounting', 'Corporate Law'];
  const englishPosts = allPosts.filter(post => englishCategories.includes(post.data.category) && post.data.draft !== true);
  const sortedPosts = englishPosts.sort((a, b) => {
    const dateA = new Date(a.data.modified || a.data.date).getTime();
    const dateB = new Date(b.data.modified || b.data.date).getTime();
    return dateB - dateA;
  });
  // Calculate total number of pages
  // Each page displays POSTS_PER_PAGE articles
  const totalPages = Math.max(1, Math.ceil(sortedPosts.length / POSTS_PER_PAGE));
  // Generate paths for each additional page
  const paths = [];
  for (let page = 2; page <= totalPages; page++) {
    const startIndex = (page - 1) * POSTS_PER_PAGE; // Page 2 starts at index 6
    const endIndex = startIndex + POSTS_PER_PAGE;
    const pagePosts = sortedPosts.slice(startIndex, endIndex);
    // Generate only if there are articles for this page
    if (pagePosts.length > 0) {
      paths.push({
        params: { page: page.toString() },
        props: {
          posts: pagePosts,
          currentPage: page,
          totalPages,
          allPostsCount: sortedPosts.length
        }
      });
    }
  }
  return paths;
}
const { posts, currentPage, totalPages, allPostsCount } = Astro.props;
const englishCategories = ['Tax', 'Payroll', 'Accounting', 'Corporate Law'];

// Get ALL articles to have real counters
const allPosts = await getCollection('blog');
const allEnglishPosts = allPosts.filter(post => {
  return englishCategories.includes(post.data.category) && post.data.draft !== true;
});

// Prepare categories with TOTAL counter (not just current page)
const categoriesWithCount = englishCategories.map(cat => {
  const slug = cat.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
  const count = allEnglishPosts.filter(post => 
    post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-') === slug
  ).length;
  
  return {
    name: cat,
    slug: slug,
    count: count
  };
});

const computeReadTime = (post) => String(calculateReadingTime(post.body ?? '', 'en'));

// Transform current page posts for ArticlesGrid
const articles = posts.map(post => ({
  title: post.data.title,
  excerpt: post.data.description || '',
  slug: post.slug.replace('en/', ''),
  date: post.data.date.toISOString(),
  category: post.data.category || 'Uncategorized',
  categorySlug: post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-') || 'uncategorized',
  author: post.data.author || 'Fiduciaire Expert',
  readTime: computeReadTime(post),
  image: post.data.image?.src,
  tags: post.data.tags || []
}));

// Transform ALL English articles for complete filtering
const allArticles = allEnglishPosts.sort((a, b) => {
  const dateA = new Date(a.data.modified || a.data.date).getTime();
  const dateB = new Date(b.data.modified || b.data.date).getTime();
  return dateB - dateA;
}).map(post => ({
  title: post.data.title,
  excerpt: post.data.description || '',
  slug: post.slug.replace('en/', ''),
  date: post.data.date.toISOString(),
  category: post.data.category || 'Uncategorized',
  categorySlug: post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-') || 'uncategorized',
  author: post.data.author || 'Fiduciaire Expert',
  readTime: computeReadTime(post),
  image: post.data.image?.src,
  tags: post.data.tags || []
}));

const categories = englishCategories;
const formatDate = (date) => date.toLocaleDateString('en-GB', {
  year: 'numeric', month: 'long', day: 'numeric'
});
// URLs for rel prev/next
const siteUrl = Astro.site ? Astro.site.origin : "https://fiduciaire-expert.lu";
const prevUrl = currentPage === 2 ? '/en/articles' : `/en/articles/page/${currentPage - 1}`;
const nextUrl = currentPage < totalPages ? `/en/articles/page/${currentPage + 1}` : null;
const canonicalUrl = `${siteUrl}/en/articles/page/${currentPage}`;
// Schema for SEO
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": siteUrl
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": `${siteUrl}/en/articles`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": `Page ${currentPage}`
    }
  ]
};
---
<LayoutI18n
  title={`Blog - Page ${currentPage} | Accounting & Tax Advice | Fiduciaire Expert Luxembourg`}
  description={`Page ${currentPage} - Find our ${allPostsCount} expert articles on accounting, taxation and business creation in Luxembourg.`}
  canonical={canonicalUrl}
  schema={breadcrumbSchema}
>
  <!-- Link tags for prev/next SEO -->
  <Fragment slot="head">
    <link rel="prev" href={prevUrl} />
    {nextUrl && <link rel="next" href={nextUrl} />}
  </Fragment>
  <StickyPageTop
    breadcrumbItems={[
      { text: "Home", href: "/en" },
      { text: "Blog", href: "/en/articles" },
      { text: `Page ${currentPage}` }
    ]}
    title="Our latest blog articles"
    subtitle={`Page ${currentPage} of ${totalPages} - Check out our expert analysis and advice to stay informed on accounting, taxation, payroll and corporate law in Luxembourg.`}
    showFilters={true}
    categories={categoriesWithCount}
    lang="en"
  />
  <section class="articles-page">
    <div class="container">
      <SearchBar 
        placeholder="Search article..." 
        lang="en"
      />
      
      <ArticlesGrid
        title={`Articles - Page ${currentPage}`}
        subtitle={`Showing ${posts.length} articles out of ${allPostsCount} total`}
        articles={articles}
        lang="en"
      />
    </div>
  </section>
  
  {/* Improved pagination */}
  <div class="pagination-section" id="pagination-section">
    <div class="container">
      <div class="pagination">
          {currentPage === 2 ? (
            <a href="/en/articles" rel="prev" class="pagination-prev">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M15 18l-6-6 6-6" />
              </svg>
              Previous articles
            </a>
          ) : currentPage > 2 ? (
            <a href={`/en/articles/page/${currentPage - 1}`} rel="prev" class="pagination-prev">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M15 18l-6-6 6-6" />
              </svg>
              Previous articles
            </a>
          ) : (
            <span class="pagination-disabled">Start</span>
          )}
          <span class="pagination-info">
            Page {currentPage} of {totalPages}
          </span>
          {nextUrl && (
            <a href={nextUrl} rel="next" class="pagination-next">
              Next articles
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 18l6-6-6-6" />
              </svg>
            </a>
        ) || (
          <span class="pagination-disabled">End</span>
        )}
      </div>
    </div>
  </div>
  
  <script define:vars={{ articles, allArticles }}>
    // Pass article data to window for search
    window.articlesData = articles;
    // Pass ALL articles for category filtering
    window.allArticlesData = allArticles;
  </script>
</LayoutI18n>

<style>
  .articles-page {
    padding: var(--section-padding);
    background: var(--bg);
  }
  
  .container {
    max-width: var(--container-max, 1200px);
    margin: 0 auto;
    padding: 0 var(--section-padding-x);
  }
  
  .pagination-section {
    padding: var(--section-padding);
    background: var(--bg);
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--gap-md, 24px);
    padding: var(--section-padding-x);
    background: var(--white);
    border-radius: var(--radius-lg, 12px);
    box-shadow: 0 2px 8px var(--card-shadow-hover);
  }
  
  .pagination-info {
    font-family: var(--font-family);
    font-size: var(--text-base);
    color: var(--fg-secondary);
    font-weight: 500;
  }
  
  .pagination-prev,
  .pagination-next {
    display: flex;
    align-items: center;
    gap: var(--gap-sm, 8px);
    padding: var(--btn-padding-y, 10px) var(--btn-padding-x, 20px);
    background: var(--accent);
    color: var(--white);
    text-decoration: none;
    border-radius: var(--radius, 8px);
    font-family: var(--font-family);
    font-size: var(--text-base);
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .pagination-prev:hover {
    background: var(--accent-dark);
    transform: translateX(calc(var(--hover-translate, 2px) * -1));
  }
  
  .pagination-next:hover {
    background: var(--accent-dark);
    transform: translateX(var(--hover-translate, 2px));
  }
  
  .pagination-disabled {
    padding: var(--btn-padding-y, 10px) var(--btn-padding-x, 20px);
    color: var(--gray-muted);
    font-family: var(--font-family);
    font-size: var(--text-base);
    font-weight: 500;
    cursor: not-allowed;
    opacity: 0.5;
  }
  
  @media (max-width: 768px) {
    .articles-page {
      padding: var(--section-padding-tablet);
    }

    .container {
      padding: 0 var(--section-padding-x-tablet);
    }

    .pagination-section {
      padding: var(--section-padding-tablet);
    }

    .pagination {
      flex-direction: column;
      gap: var(--gap-md, 16px);
      padding: var(--section-padding-x-tablet);
    }

    .pagination-prev,
    .pagination-next {
      width: 100%;
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .articles-page {
      padding: var(--section-padding-mobile);
    }

    .container {
      padding: 0 var(--section-padding-x-mobile);
    }

    .pagination-section {
      padding: var(--section-padding-mobile);
    }

    .pagination {
      padding: var(--section-padding-x-mobile);
    }

    .pagination-disabled {
      padding: var(--btn-padding-y, 10px) var(--btn-padding-x, 20px);
    }
  }
</style>
