---
// src/pages/articles/category/[category].astro
import { getCollection } from 'astro:content';
import LayoutI18n from '../../../../layouts/LayoutI18n.astro';
// NEW: Import Image component
import { Image } from 'astro:assets';
import SearchBar from '../../../../components/SearchBar.astro';
import StickyPageTop from '../../../../components/StickyPageTop.astro';
import '../../../../styles/blog-articles.css';
import '../../../../styles/blog-articles-dark.css';
// 1. Generate a page for each category using getCollection
export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  // Only get English categories
  const englishCategories = ['Tax', 'Payroll', 'Accounting', 'Corporate Law'];
  const englishPosts = allPosts.filter(post => englishCategories.includes(post.data.category) && post.data.draft !== true);
  const uniqueCategories = [...new Set(englishPosts.map((post) => post.data.category).filter(Boolean))];
  return uniqueCategories.map((category) => {
    const slug = category.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
    return {
      params: { category: slug },
      props: { 
        categoryName: category
      },
    };
  });
}
const { category } = Astro.params;
const { categoryName } = Astro.props;
// 2. Filter articles from the right category
const allPosts = await getCollection('blog');
// Filter posts by exact category match
const filteredPosts = allPosts.filter(post => {
  return post.data.category === categoryName && post.data.draft !== true;
}).sort((a, b) => {
  // Use modified if it exists, otherwise use date
  const dateA = new Date(a.data.modified || a.data.date).getTime();
  const dateB = new Date(b.data.modified || b.data.date).getTime();
  return dateB - dateA;
});
// Get only English categories
const englishCategories = ['Tax', 'Payroll', 'Accounting', 'Corporate Law'];
const allCategories = englishCategories;
// Helper (unchanged)
const formatDate = (date: Date) => date.toLocaleDateString('en-GB', {
  year: 'numeric', month: 'long', day: 'numeric'
});
---
<LayoutI18n
  title={`Category: ${categoryName} | Blog Fiduciaire Expert`}
  description={`Find all our articles on the topic "${categoryName}" and benefit from our expert advice.`}
  canonical={`https://www.fiduciaire-expert.lu/en/articles/category/${category}`}
  lang="en"
>
  <StickyPageTop
    breadcrumbItems={[
      { text: "Home", href: "/en" },
      { text: "Blog", href: "/en/articles" },
      { text: categoryName }
    ]}
    title={`Category: ${categoryName}`}
    subtitle={`${filteredPosts.length} article${filteredPosts.length > 1 ? 's' : ''} found on this topic.`}
  />
  <!-- Search Bar Section -->
  <section class="search-section">
    <div class="container">
      <SearchBar placeholder={`Search in ${categoryName}...`} lang="en" />
    </div>
  </section>
  <section class="category-posts-section">
    <div class="container">
      <div class="posts-grid">
        {filteredPosts.map(post => (
          <article class="post-card">
            <a href={`/en/articles/${post.slug.replace('en/', '')}`} class="post-link">
              {post.data.image && (
                <div class="post-image-wrapper">
                  {/* MODIFIED: Using optimized Image component */}
                  <Image src={post.data.image} alt={post.data.title} width="400" height="200" loading="lazy" quality="mid" />
                </div>
              )}
              <div class="post-content">
                <p class="post-meta">
                   {/* Add category here to be consistent with index */}
                  <span class="category-badge">{post.data.category}</span>
                  <time datetime={(post.data.modified && new Date(post.data.modified) > new Date(post.data.date) ? new Date(post.data.modified) : post.data.date).toISOString()}>{formatDate(post.data.modified && new Date(post.data.modified) > new Date(post.data.date) ? new Date(post.data.modified) : post.data.date)}</time>
                </p>
                <h4 class="post-title">{post.data.title}</h4>
              </div>
            </a>
          </article>
        ))}
      </div>
    </div>
  </section>
  <!-- Categories Section -->
  <section class="categories-section">
    <div class="container">
      <div class="categories-widget">
        <h3 class="widget-title">Explore other categories</h3>
        <nav class="category-nav">
          <a href="/en/articles" class="category-link">All categories</a>
          {allCategories.map(cat => {
            const slug = cat.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
            const isActive = cat === categoryName;
            return (
              <a 
                href={`/en/articles/category/${slug}`} 
                class={`category-link ${isActive ? 'is-active' : ''}`}
              >
                {cat}
              </a>
            );
          })}
        </nav>
      </div>
    </div>
  </section>
</LayoutI18n>
<style>
  /* ===== PREMIUM CLEAN AND STATUTORY DESIGN ===== */
  /* Search Section */
  .search-section {
    padding: 3rem 0 2rem;
    background-color: #ffffff;
    position: relative;
  }
  .search-section::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(to right, transparent, #e2e8f0 50%, transparent);
  }
  .search-section .container {
    max-width: 600px;
    text-align: center;
  }
  /* Section principale épurée */
  .category-posts-section {
    padding: 6rem 0;
    background-color: #fafbfc;
    position: relative;
  }
  .category-posts-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 1px;
    background: linear-gradient(90deg, transparent, #e2e8f0, transparent);
  }
  /* Grille compacte pour afficher plus d'articles */
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  .post-card {
    background-color: #fafbfc;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  .post-card:hover {
    border-color: #e2e8f0;
  }
  .post-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }
  .post-image-wrapper {
    overflow: hidden;
    background-color: #f1f5f9;
    height: 200px;
  }
  .post-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  .post-card:hover .post-image-wrapper img {
    transform: scale(1.05);
  }
  .post-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  .post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.75rem;
    color: #64748b;
    font-size: 0.8125rem;
  }
  .category-badge {
    color: #3b82f6;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    font-size: 0.6875rem;
  }
  .post-title {
    font-size: 1.25rem;
    font-weight: 400;
    margin-bottom: 0.75rem;
    line-height: 1.3;
    color: #0f172a;
    letter-spacing: -0.01em;
    flex: 0;
  }
  .post-card:hover .post-title {
    color: #2c4157;
  }
  /* .post-excerpt removed as descriptions are no longer displayed */
  /* Animations raffinées */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .post-card {
    animation: fadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    animation-fill-mode: both;
  }
  .post-card:nth-child(1) { animation-delay: 0.05s; }
  .post-card:nth-child(2) { animation-delay: 0.1s; }
  .post-card:nth-child(3) { animation-delay: 0.15s; }
  .post-card:nth-child(4) { animation-delay: 0.2s; }
  .post-card:nth-child(5) { animation-delay: 0.25s; }
  .post-card:nth-child(6) { animation-delay: 0.3s; }
  /* Responsive */
  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    .post-content {
      padding: 1.25rem;
    }
    .post-title {
      font-size: 1.125rem;
    }
    .post-image-wrapper {
      max-height: 200px;
    }
  }
  @media (min-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  @media (min-width: 1400px) {
    .posts-grid {
      grid-template-columns: repeat(4, 1fr);
      gap: 1.25rem;
    }
  }
  /* Categories Section - Design épuré */
  .categories-section {
    padding: 4rem 0 6rem;
    background-color: #ffffff;
    border-top: 1px solid #f1f5f9;
  }
  .categories-widget {
    max-width: 800px;
    margin: 0 auto;
    background-color: #fafbfc;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    padding: 3rem;
    text-align: center;
  }
  .widget-title {
    font-size: 1.5rem;
    font-weight: 200;
    color: #0f172a;
    margin-bottom: 2rem;
    letter-spacing: -0.02em;
  }
  .category-nav {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
  }
  .category-link {
    padding: 0.625rem 1.25rem;
    text-decoration: none;
    color: #64748b;
    font-size: 0.875rem;
    font-weight: 500;
    border-radius: 4px;
    border: 1px solid #e2e8f0;
    background-color: #ffffff;
  }
  .category-link:hover {
    background-color: #f1f5f9;
    color: #0f172a;
    border-color: #cbd5e1;
  }
  .category-link.is-active {
    background-color: #3b82f6;
    color: #ffffff;
    border-color: #3b82f6;
    font-weight: 600;
  }
  /* Container */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  @media (max-width: 768px) {
    .categories-widget {
      padding: 2rem 1.5rem;
    }
    .widget-title {
      font-size: 1.25rem;
    }
    .category-nav {
      gap: 0.5rem;
    }
    .category-link {
      padding: 0.5rem 1rem;
      font-size: 0.8125rem;
    }
  }
</style>