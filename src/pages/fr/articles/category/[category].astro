---
// src/pages/articles/category/[category].astro
import { getCollection } from 'astro:content';
import LayoutI18n from '../../../../layouts/LayoutI18n.astro';
// NOUVEAU : Importation du composant Image
import SearchBar from '../../../../components/SearchBar.astro';
import StickyPageTop from '../../../../components/StickyPageTop.astro';
import ArticlesGrid from '../../../../components/ArticlesGrid.astro';
// 1. Génère une page pour chaque catégorie en utilisant getCollection (inchangé)
export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const frenchCategories = ['Fiscalité', 'Social', 'Comptabilité', 'Juridique'];
  const frenchPosts = allPosts.filter(post => frenchCategories.includes(post.data.category) && post.data.draft !== true);
  const uniqueCategories = [...new Set(frenchPosts.map((post) => post.data.category).filter(Boolean))];
  return uniqueCategories.map((category) => {
    const slug = category.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
    return {
      params: { category: slug },
      props: { categoryName: category },
    };
  });
}
const { category } = Astro.params;
const { categoryName } = Astro.props;
// 2. Filtre les articles de la bonne catégorie (inchangé)
const allPosts = await getCollection('blog');
const filteredPosts = allPosts.filter(post => {
  const postCategorySlug = post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
  return postCategorySlug === category && post.data.draft !== true;
}).sort((a, b) => {
  // Utiliser modified s'il existe, sinon utiliser date
  const dateA = new Date(a.data.modified || a.data.date).getTime();
  const dateB = new Date(b.data.modified || b.data.date).getTime();
  return dateB - dateA;
});
// Récupérer seulement les catégories françaises
const frenchCategories = ['Fiscalité', 'Social', 'Comptabilité', 'Juridique'];

// Préparer les catégories avec compteur
const categoriesWithCount = frenchCategories.map(cat => {
  const slug = cat.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-');
  const count = allPosts.filter(post => 
    post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-') === slug
  ).length;
  
  return {
    name: cat,
    slug: slug,
    count: count
  };
});

// Transformer les posts pour ArticlesGrid
const articles = filteredPosts.map(post => ({
  title: post.data.title,
  excerpt: post.data.description || '',
  slug: post.slug.replace('fr/', ''),
  date: post.data.date.toISOString(),
  category: post.data.category || 'Non catégorisé',
  categorySlug: post.data.category?.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '-') || 'non-categorise',
  author: post.data.author || 'Fiduciaire Expert',
  readTime: post.data.readingTime || '5',
  image: post.data.image?.src,
  tags: post.data.tags || []
}));

const allCategories = frenchCategories;
const formatDate = (date) => date.toLocaleDateString('fr-FR', {
  year: 'numeric', month: 'long', day: 'numeric'
});
---
<LayoutI18n
  title={`Catégorie : ${categoryName} | Blog Fiduciaire Expert`}
  description={`Retrouvez tous nos articles sur le thème "${categoryName}" et bénéficiez de nos conseils d'experts.`}
  canonical={`https://fiduciaire-expert.lu/fr/articles/category/${category}`}
>
  <StickyPageTop
    breadcrumbItems={[
      { text: "Accueil", href: "/fr" },
      { text: "Blog", href: "/fr/articles" },
      { text: categoryName }
    ]}
    title={`Catégorie : ${categoryName}`}
    subtitle={`${filteredPosts.length} article${filteredPosts.length > 1 ? 's' : ''} trouvé${filteredPosts.length > 1 ? 's' : ''} sur ce sujet.`}
    showFilters={true}
    categories={categoriesWithCount}
    lang="fr"
  />
  <section class="articles-page">
    <div class="container">
      <SearchBar 
        placeholder={`Rechercher dans ${categoryName}...`} 
        lang="fr"
      />
      
      <ArticlesGrid
        title={`Articles : ${categoryName}`}
        subtitle={`Découvrez tous nos articles sur ${categoryName.toLowerCase()}`}
        articles={articles}
        lang="fr"
      />
    </div>
  </section>
  
  <script define:vars={{ articles }}>
    // Passer les données des articles à la fenêtre pour la recherche
    window.articlesData = articles;
  </script>
</LayoutI18n>

<style>
  .articles-page {
    padding: 40px 0;
    background: var(--bg);
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }
  
  @media (max-width: 768px) {
    .articles-page {
      padding: 20px 0;
    }
  }
</style>

