---
import { getCollection } from 'astro:content';
import LayoutI18n from '../../layouts/LayoutI18n.astro';
import SearchBar from '../../components/SearchBar.astro';

// Configuration pour le sélecteur de langue
const currentPath = Astro.url.pathname;
const searchParams = Astro.url.searchParams.toString();
const translations = {
  en: "/en/search" + (searchParams ? `?${searchParams}` : "")
};

// Récupérer tous les articles
const allArticles = await getCollection('blog');

// Filtrer pour les articles français non draft
const allPosts = allArticles.filter(post => {
  return post.id.startsWith('fr/') && post.data.draft !== true;
});

// Préparer les données pour le client
const articlesData = allPosts.map(post => ({
  id: post.id,
  slug: post.slug,
  title: post.data.title || '',
  description: post.data.description || '',
  category: post.data.category || '',
  date: post.data.date.toISOString(),
  image: post.data.image,
  body: post.body || ''
}));
---

<LayoutI18n
  title="Recherche | Fiduciaire Expert"
  description="Recherchez dans nos articles sur la comptabilité, la fiscalité et le droit des sociétés au Luxembourg"
  noindex={true}
  translations={translations}
>
  <div class="search-page-container">
    <section class="search-hero" id="search-hero">
      <div class="search-wrapper">
        <SearchBar placeholder="Que recherchez-vous ?" lang="fr" />
      </div>
    </section>
    
    <!-- Sticky Search Bar -->
    <div class="sticky-search-bar" id="sticky-search" style="display: none;">
      <div class="container">
        <SearchBar placeholder="Nouvelle recherche..." lang="fr" />
      </div>
    </div>

    <section class="search-results-section" id="search-section" style="display: none;">
      <div class="container">
        <div class="results-layout">
          <div id="search-results"></div>
          <aside class="sidebar-categories">
            <div class="sidebar-widget">
              <h3 class="widget-title">Catégories</h3>
              <nav class="category-nav">
                <a href="/fr/articles/category/fiscalité" class="category-link">Fiscalité</a>
                <a href="/fr/articles/category/social" class="category-link">Social</a>
                <a href="/fr/articles/category/comptabilité" class="category-link">Comptabilité</a>
                <a href="/fr/articles/category/juridique" class="category-link">Juridique</a>
              </nav>
            </div>
          </aside>
        </div>
      </div>
    </section>
  </div>
</LayoutI18n>

<script define:vars={{ articlesData }}>
  // Fonction pour mettre en surbrillance
  function highlightText(text, query) {
    if (!query || !text) return text;
    const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(`(${escapedQuery})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  }

  // Fonction pour formater la date
  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', {
      year: 'numeric', month: 'long', day: 'numeric'
    });
  }

  // Fonction pour vérifier si un mot complet existe dans le texte
  function containsWord(text, word) {
    if (!text || !word) return false;
    // Créer une regex qui cherche le mot comme mot complet ou partie d'un mot composé
    const escapedWord = word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(`\\b${escapedWord}|${escapedWord}\\b`, 'gi');
    return regex.test(text);
  }

  // Fonction pour calculer un score de pertinence
  function calculateRelevanceScore(post, query) {
    let score = 0;
    const lowerQuery = query.toLowerCase();
    
    // Titre - priorité maximale
    if (post.title.toLowerCase().includes(lowerQuery)) {
      score += 100;
      // Bonus si le mot est exact dans le titre
      if (containsWord(post.title, query)) {
        score += 50;
      }
    }
    
    // Description - priorité haute
    if (post.description.toLowerCase().includes(lowerQuery)) {
      score += 50;
      if (containsWord(post.description, query)) {
        score += 25;
      }
    }
    
    // Catégorie - priorité moyenne
    if (post.category.toLowerCase().includes(lowerQuery)) {
      score += 30;
    }
    
    // Body - priorité basse, mais on vérifie les mots complets
    if (containsWord(post.body, query)) {
      score += 10;
      // Compter le nombre d'occurrences pour affiner le score
      const matches = post.body.toLowerCase().match(new RegExp(lowerQuery, 'g'));
      if (matches) {
        score += Math.min(matches.length * 2, 20); // Max 20 points bonus
      }
    }
    
    return score;
  }

  // Fonction de recherche
  function performSearch() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('q') || '';
    const resultsContainer = document.getElementById('search-results');
    const searchSection = document.getElementById('search-section');
    const stickySearch = document.getElementById('sticky-search');
    
    const searchHero = document.getElementById('search-hero');
    
    if (!searchQuery) {
      resultsContainer.innerHTML = '';
      searchSection.style.display = 'none';
      stickySearch.style.display = 'none';
      searchHero.classList.remove('has-results');
      return;
    }
    
    searchSection.style.display = 'block';
    stickySearch.style.display = 'block';
    searchHero.classList.add('has-results');
    
    // Scroll vers le haut pour afficher les résultats
    window.scrollTo({ top: 0, behavior: 'smooth' });

    const query = searchQuery.trim();
    
    // Filtrer et scorer les articles
    const searchResults = articlesData
      .map(post => ({
        ...post,
        relevanceScore: calculateRelevanceScore(post, query)
      }))
      .filter(post => post.relevanceScore > 0)
      .sort((a, b) => b.relevanceScore - a.relevanceScore);

    // Afficher les résultats
    if (searchResults.length > 0) {
      let html = `
        <div class="results-header">
          <p class="results-count">
            <strong>${searchResults.length}</strong> résultat${searchResults.length !== 1 ? 's' : ''} pour 
            "<strong>${searchQuery}</strong>"
          </p>
        </div>
        <div class="results-grid">
      `;

      searchResults.forEach(post => {
        const articleUrl = `/fr/articles/${post.id.replace('fr/', '').replace('.md', '')}`;
        const imageUrl = post.image ? (typeof post.image === 'string' ? post.image : post.image.src) : null;
        
        html += `
          <article class="result-card" style="background: #ffffff; border: 1px solid #e2e8f0; border-radius: 4px; overflow: hidden; transition: all 0.2s ease; margin-bottom: 1rem;">
            <a href="${articleUrl}" class="result-link" style="display: flex; align-items: center; gap: 1.5rem; padding: 1.5rem; text-decoration: none !important; color: inherit;" onmouseover="this.style.textDecoration='none'" onmouseout="this.style.textDecoration='none'">
              ${imageUrl ? `
                <div class="result-image" style="flex-shrink: 0; width: 120px; height: 120px; overflow: hidden; border-radius: 4px; background: #f8fafc;">
                  <img src="${imageUrl}" alt="${post.title}" loading="lazy" style="width: 100%; height: 100%; object-fit: cover;" />
                </div>
              ` : `
                <div class="result-image result-image-placeholder" style="flex-shrink: 0; width: 120px; height: 120px; border-radius: 4px; background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%); display: flex; align-items: center; justify-content: center; color: #94a3b8;">
                  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                    <line x1="16" y1="13" x2="8" y2="13"></line>
                    <line x1="16" y1="17" x2="8" y2="17"></line>
                  </svg>
                </div>
              `}
              <div class="result-content" style="flex: 1; min-width: 0;">
                <div class="result-meta" style="display: flex; align-items: center; gap: 1rem; margin-bottom: 0.5rem; font-size: 0.75rem; color: #94a3b8;">
                  ${post.category ? `<span class="result-category" style="color: #3b82f6; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; font-size: 0.7rem;">${post.category}</span>` : ''}
                  <time datetime="${post.date}">${formatDate(post.date)}</time>
                </div>
                <h3 class="result-title" style="font-size: 1.25rem; font-weight: 600; margin: 0 0 0.5rem 0; color: #0f172a; line-height: 1.4;">${highlightText(post.title, searchQuery)}</h3>
                <p class="result-excerpt" style="color: #64748b; line-height: 1.6; font-size: 0.9375rem; margin: 0; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">${highlightText(post.description, searchQuery)}</p>
              </div>
            </a>
          </article>
        `;
      });

      html += '</div>';
      resultsContainer.innerHTML = html;
      
      // Ajouter les effets hover après injection du HTML
      const cards = resultsContainer.querySelectorAll('.result-card');
      cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-2px)';
          this.style.boxShadow = '0 8px 20px rgba(0, 0, 0, 0.08)';
        });
        card.addEventListener('mouseleave', function() {
          this.style.transform = 'translateY(0)';
          this.style.boxShadow = 'none';
        });
      });
    } else {
      resultsContainer.innerHTML = `
        <div class="no-results">
          <p>Votre recherche n'a donné aucun résultat.</p>
        </div>
      `;
    }
  }

  // Exécuter la recherche au chargement
  performSearch();

  // Ré-exécuter si l'URL change
  window.addEventListener('popstate', performSearch);
  
  // Gérer la position de la barre sticky
  document.addEventListener('DOMContentLoaded', () => {
    const stickyBar = document.getElementById('sticky-search');
    const header = document.querySelector('.site-header, header');
    
    if (stickyBar && header) {
      // Ajuster la position en fonction de la hauteur du header
      const updatePosition = () => {
        const headerHeight = header.offsetHeight;
        stickyBar.style.top = headerHeight + 'px';
      };
      
      // Mise à jour initiale
      updatePosition();
      
      // Mise à jour lors du resize
      window.addEventListener('resize', updatePosition);
    }
  });
</script>

<style>
  /* Container plein écran */
  .search-page-container {
    min-height: calc(100vh - 200px); /* Ajusté pour le header/footer */
    display: flex;
    flex-direction: column;
  }

  /* Hero de recherche - Centré */
  .search-hero {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    padding: 2rem;
    transition: all 0.3s ease;
  }

  /* Quand les résultats sont affichés - Cacher complètement */
  .search-hero.has-results {
    display: none;
  }

  .search-wrapper {
    width: 100%;
    max-width: 700px;
    margin: 0 auto;
  }

  /* Sticky Search Bar */
  .sticky-search-bar {
    position: fixed;
    top: 64px; /* Fixed position under header */
    left: 0;
    right: 0;
    z-index: 100;
    background: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem 0;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease;
  }
  
  .sticky-search-bar .container {
    max-width: 800px;
  }
  
  .sticky-search-bar :global(.search-container) {
    margin: 0;
  }

  /* Section résultats */
  .search-results-section {
    padding: 6rem 0 4rem; /* Top padding increased to account for fixed search bar */
    background: #fafbfc;
    flex: 1;
    min-height: calc(100vh - 200px);
  }
  
  /* Layout avec sidebar */
  .results-layout {
    display: grid;
    grid-template-columns: 1fr 360px;
    gap: 3rem;
    align-items: start;
  }
  
  /* Sidebar Categories */
  .sidebar-categories {
    position: sticky;
    top: 180px; /* Increased spacing below sticky search bar */
    align-self: start;
  }
  
  .sidebar-widget {
    background-color: #fafbfc;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    padding: 2rem;
    margin-bottom: 2rem;
  }
  
  .widget-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #0f172a;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  /* Category Navigation */
  .category-nav {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .category-link {
    padding: 0.625rem 0.875rem;
    text-decoration: none;
    color: #64748b;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.15s ease;
    border-radius: 4px;
  }
  
  .category-link:hover {
    background-color: #f1f5f9;
    color: #0f172a;
  }
  
  @media (max-width: 1024px) {
    .results-layout {
      grid-template-columns: 1fr;
    }
    
    .sidebar-categories {
      display: none;
    }
  }

  @media (max-width: 968px) {
    /* Sur mobile, garder la barre en haut */
    .search-hero.has-results {
      display: flex;
      flex: 0;
      padding: 2rem 0 1rem;
      align-items: flex-start;
    }
    
    .sticky-search-bar {
      display: none !important;
    }
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  #search-results {
    width: 100%;
  }

  /* Animation pour la transition */
  @keyframes slideUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .search-results-section {
    animation: slideUp 0.4s ease-out;
  }

  /* En-tête des résultats - Épuré */
  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .results-count {
    font-size: 0.875rem;
    color: #94a3b8;
    font-weight: 300;
  }

  .results-count strong {
    color: #2c4157;
    font-weight: 400;
  }

  .clear-search {
    color: #64748b;
    text-decoration: none;
    font-weight: 400;
    font-size: 0.8125rem;
    transition: color 0.15s ease;
  }

  .clear-search:hover {
    color: #2c4157;
    text-decoration: none;
  }

  /* Grille de résultats */
  .results-grid {
    display: flex;
    flex-direction: column;
    gap: 0;
    margin-top: 2rem;
  }

  /* Hover effects via JavaScript */
  .result-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
  }


  /* Mise en surbrillance - Surlignage subtil */
  :global(mark) {
    background: linear-gradient(to bottom, transparent 40%, #fbbf24 40%, #fbbf24 90%, transparent 90%);
    color: inherit;
    padding: 0 0.125rem;
    font-weight: 500;
    text-decoration: none;
  }

  /* États vides */
  .no-results,
  .initial-state {
    text-align: center;
    padding: 4rem 2rem;
    max-width: 600px;
    margin: 0 auto;
  }

  .no-results p,
  .initial-state p {
    font-size: 1.125rem;
    color: #64748b;
    margin-bottom: 1.5rem;
  }

  .suggestions {
    font-weight: 600;
    color: #0f172a;
    margin-top: 2rem;
  }

  .no-results ul,
  .initial-state ul {
    list-style: none;
    text-align: left;
    max-width: 400px;
    margin: 0 auto 2rem;
  }

  .no-results li,
  .initial-state li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 0.75rem;
    color: #64748b;
  }

  .no-results li::before,
  .initial-state li::before {
    content: '•';
    position: absolute;
    left: 0;
    color: #3b82f6;
    font-weight: bold;
  }

  .btn-secondary {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: #ffffff;
    color: #0f172a;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
    margin-top: 1rem;
  }

  .btn-secondary:hover {
    background: #f8fafc;
    border-color: #cbd5e1;
    transform: translateY(-1px);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .results-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
  }
</style>